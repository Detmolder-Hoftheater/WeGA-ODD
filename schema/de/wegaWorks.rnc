namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"
default namespace mei = "http://www.music-encoding.org/ns/mei"
namespace rng = "http://relaxng.org/ns/structure/1.0"
namespace s = "http://www.ascc.net/xml/schematron"
namespace sch = "http://purl.oclc.org/dsdl/schematron"
namespace tei = "http://www.tei-c.org/ns/1.0"
namespace xi = "http://www.w3.org/2001/XInclude"
namespace xlink = "http://www.w3.org/1999/xlink"

# Schema generated from ODD source 2015-09-15T13:54:49Z. 
# Edition: 2013 Release
# Edition Location: http://www.tei-c.org/Vault/P5//
#

# This work is licensed under a Creative Commons Attribution 3.0 Unported License (CC BY 3.0).

sch:ns [ prefix = "tei" uri = "http://www.tei-c.org/ns/1.0" ]
data.ACCIDENTAL.EXPLICIT =
  
  ## sharp
  "s"
  | 
    ## flat
    "f"
  | 
    ## double sharp (written as 2 sharps)
    "ss"
  | 
    ## double sharp (written using croix)
    "x"
  | 
    ## double flat
    "ff"
  | 
    ## triple sharp (written as croix and 2 sharps)
    "xs"
  | 
    ## triple sharp (written as 3 sharps)
    "ts"
  | 
    ## triple flat
    "tf"
  | 
    ## natural
    "n"
  | 
    ## natural + flat
    "nf"
  | 
    ## natural + sharp
    "ns"
  | 
    ## sharp note raised by quarter tone
    "su"
  | 
    ## sharp note lowered by quarter tone
    "sd"
  | 
    ## flat note raised by quarter tone
    "fu"
  | 
    ## flat note lowered by quarter tone
    "fd"
  | 
    ## natural note raised by quarter tone
    "nu"
  | 
    ## natural note lowered by quarter tone
    "nd"
data.ACCIDENTAL.IMPLICIT =
  
  ## sharp
  "s"
  | 
    ## flat
    "f"
  | 
    ## double sharp
    "ss"
  | 
    ## double flat
    "ff"
  | 
    ## natural
    "n"
  | 
    ## three quarter-tones sharp
    "su"
  | 
    ## quarter-tone sharp
    "sd"
  | 
    ## quarter-tone flat
    "fu"
  | 
    ## three quarter-tones flat
    "fd"
data.ARTICULATION =
  
  ## accent (Unicode 1D17B)
  "acc"
  | 
    ## staccato (Unicode 1D17C)
    "stacc"
  | 
    ## tenuto (Unicode 1D17D)
    "ten"
  | 
    ## staccatissimo (Unicode 1D17E)
    "stacciss"
  | 
    ## marcato (Unicode 1D17F)
    "marc"
  | 
    ## marcato + staccato (Unicode 1D180)
    "marc-stacc"
  | 
    ## spiccato
    "spicc"
  | 
    ## main note followed by short slide to higher, indeterminate pitch (Unicode
    ##             1D185)
    "doit"
  | 
    ## main note preceded by short slide from lower, indeterminate pitch
    ##             (Unicode 1D186)
    "rip"
  | 
    ## main note preceded by "slide" from higher, indeterminate
    ##             pitch
    "plop"
  | 
    ## main note followed by long "slide" to lower, indeterminate
    ##             pitch
    "fall"
  | 
    ## "lip slur" to lower pitch, then return to written pitch
    "bend"
  | 
    ## main note followed by quick upward rise, then descent in pitch (Unicode
    ##             1D187)
    "flip"
  | 
    ## (Unicode 1D188)
    "smear"
  | 
    ## down bow (Unicode 1D1AA)
    "dnbow"
  | 
    ## up bow (Unicode 1D1AB)
    "upbow"
  | 
    ## harmonic (Unicode 1D1AC)
    "harm"
  | 
    ## snap pizzicato (Unicode 1D1AD)
    "snap"
  | 
    ## fingernail (Unicode 1D1B3)
    "fingernail"
  | 
    ## tenuto + staccato (Unicode 1D182)
    "ten-stacc"
  | 
    ## dampen harp string (Unicode 1D1B4)
    "damp"
  | 
    ## dampen all harp strings (Unicode 1D1B5)
    "dampall"
  | 
    ## full (as opposed to stopped) tone
    "open"
  | 
    ## "muffled" tone
    "stop"
  | 
    ## double tongue (Unicode 1D18A)
    "dbltongue"
  | 
    ## triple tongue (Unicode 1D18B)
    "trpltongue"
  | 
    ## use heel (organ pedal)
    "heel"
  | 
    ## use toe (organ pedal)
    "toe"
  | 
    ## percussive effect on guitar string(s)
    "tap"
  | 
    ## left-hand pizzicato
    "lhpizz"
  | 
    ## uninterpreted dot
    "dot"
  | 
    ## uninterpreted stroke
    "stroke"
data.ARTICULATIONS = list { data.ARTICULATION+ }
data.AUGMENTDOT = xsd:nonNegativeInteger { maxInclusive = "4" }
data.BARPLACE =
  
  ## between staves only
  "mensur"
  | 
    ## between and across staves as necessary
    "staff"
  | 
    ## short line above staff or through top line
    "takt"
data.BARRENDITION =
  
  ## dashed line (Unicode 1D104)
  "dashed"
  | 
    ## dotted line
    "dotted"
  | 
    ## (Unicode 1D101)
    "dbl"
  | 
    ## double dashed line
    "dbldashed"
  | 
    ## double dotted line
    "dbldotted"
  | 
    ## (Unicode 1D102)
    "end"
  | 
    ## bar line not rendered
    "invis"
  | 
    ## repeat start (Unicode 1D106)
    "rptstart"
  | 
    ## repeat start and end
    "rptboth"
  | 
    ## repeat end (Unicode 1D107)
    "rptend"
  | 
    ## (Unicode 1D100)
    "single"
data.BEAM = xsd:token { pattern = "[i|m|t][1-6]" }
data.BEAMS = list { data.BEAM+ }
data.BEAT = xsd:decimal { minInclusive = "0" }
data.BEATRPT.REND =
  xsd:positiveInteger { pattern = "4|8|16|32|64|128" }
  | xsd:token { pattern = "mixed" }
data.BOOLEAN = "true" | "false"
data.CERTAINTY = "high" | "medium" | "low" | "unknown"
data.CLEFLINE = xsd:positiveInteger
data.CLEFSHAPE =
  
  ## G clef (Unicode 1D11E)
  "G"
  | 
    ## Double G clef
    "GG"
  | 
    ## F clef (Unicode 1D122)
    "F"
  | 
    ## C clef (Unicode 1D121)
    "C"
  | 
    ## Drum clef (Unicode 1D125 or Unicode 1D126)
    "perc"
  | 
    ## tablature "clef"; i.e. usually "TAB" rendered
    ##             vertically
    "TAB"
data.CLUSTER =
  
  ## unfilled box
  "whbox"
  | 
    ## filled box
    "blbox"
data.COLOR =
  xsd:token { pattern = "#[0-9A-Fa-f]{6,6}" }
  | xsd:token { pattern = "#[0-9A-Fa-f]{8,8}" }
  | xsd:token {
      pattern =
        "rgb\((\s*(([01]?[0-9]?[0-9])|2[0-4][0-9]|25[0-5])\s*,\s*){2}([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\s*\)"
    }
  | xsd:token {
      pattern =
        "rgba\(\s*(([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\s*,\s*){3}(0(\.\d+)?|1(\.0+)?)\s*\)|rgba\(\s*(((\d{1,2})?%|100%)\s*,\s*){2}(\d{1,2}%|100%)\s*,\s*(0(\.\d+)?|1(\.0+)?)\s*\)"
    }
  | xsd:token {
      pattern =
        "hsl\(\s*((\d{1,2})|[12]\d{2}|3[0-5]\d|360)\s*,\s*(\d{1,2}%|100%)\s*,\s*(\d{1,2}%|100%)\s*\)"
    }
  | xsd:token {
      pattern =
        "hsla\(\s*(\d{1,2}|[12]\d{2}|3[0-5]\d|360)\s*,\s*(\d{1,2}%|100%)\s*,\s*(\d{1,2}%|100%)\s*,\s*(0(\.\d+)?|1(\.0+)?)\s*\)"
    }
  | "aqua"
  | "black"
  | "blue"
  | "fuchsia"
  | "gray"
  | "green"
  | "lime"
  | "maroon"
  | "navy"
  | "olive"
  | "purple"
  | "red"
  | "silver"
  | "teal"
  | "white"
  | "yellow"
data.COLORS = list { data.COLOR+ }
data.CURVERENDITION =
  
  ## default line width
  "narrow"
  | 
    ## twice as wide as normal
    "medium"
  | 
    ## twice as wide as medium
    "wide"
  | 
    ## dashed
    "dashed"
  | 
    ## dotted
    "dotted"
data.DURATION = data.DURATION.cmn
data.DURATION.additive =
  list {
    xsd:token {
      pattern = "(long|breve|1|2|4|8|16|32|64|128|256|1024|2048)(\.)*"
    }+
  }
data.DURATION.gestural =
  list {
    xsd:token { pattern = "[0-9]+(\.)*r" }+
  }
  | xsd:token { pattern = "[0-9]+((\.)*p|(\.[0-9]+)?(b|s))" }
data.ENCLOSURE =
  
  ## parentheses
  "paren"
  | 
    ## square brackets
    "brack"
data.FONTFAMILY = xsd:token
data.FONTNAME = xsd:token
data.FONTSIZE = xsd:token { pattern = "\d+(\.\d+)?(pt)?" }
data.FONTSTYLE =
  
  ## text slants to right
  "italic"
  | 
    ## unadorned
    "normal"
  | 
    ## text slants to the left
    "oblique"
data.FONTWEIGHT = "bold" | "normal"
data.GLISSANDO =
  
  ## first note/chord in glissando
  "i"
  | 
    ## note/chord that's neither first nor last in glissando
    "m"
  | 
    ## last note in glissando
    "t"
data.GRACE =
  
  ## time "stolen" from following note
  "acc"
  | 
    ## time "stolen" from previous note
    "unacc"
  | 
    ## no interpretation regarding performed value of grace
    ##             note
    "unknown"
data.HEADSHAPE =
  
  ## filled oval (Unicode 1D158)
  "quarter"
  | 
    ## open oval (Unicode 1D157)
    "half"
  | 
    ## open oval (Unicode 1D15D)
    "whole"
  | 
    ## modern breve (Unicode 1D15C)
    "dblwhole"
  | 
    ## filled diamond (Unicode 1D1BA)
    "filldiamond"
  | 
    ## open diamond (Unicode 1D1B9)
    "diamond"
  | 
    ## double whole diamond (Mup)
    "dwdiamond"
  | 
    ## filled isosceles triangle (Unicode 1D149)
    "fillisotriangle"
  | 
    ## open isosceles triangle (Unicode 1D148)
    "isotriangle"
  | 
    ## double whole open isosceles triangle (Unicode 1D14E)
    "dwhisotriangle"
  | 
    ## filled downward-pointing wedge (Unicode 1D155)
    "fillpiewedge"
  | 
    ## downward-pointing wedge (Unicode 1D154)
    "piewedge"
  | 
    ## double whole downward-pointing wedge (Mup)
    "dwhpiewedge"
  | 
    ## filled rectangle (Unicode 1D147)
    "fillrectangle"
  | 
    ## open rectangle (Unicode 1D146)
    "rectangle"
  | 
    ## double whole open rectangle (Mup)
    "dwhrectangle"
  | 
    ## filled right triangle (Unicode 1D14B)
    "fillrtriangle"
  | 
    ## open right triangle (Unicode 1D14A)
    "rtriangle"
  | 
    ## double whole right triangle (Mup)
    "dwrtriangle"
  | 
    ## filled upper right triangle (Unicode 1D151)
    "fillurtriangle"
  | 
    ## open upper right triangle (Unicode 1D150)
    "urtriangle"
  | 
    ## double whole upper right triangle
    "dwurtriangle"
  | 
    ## filled semi-circle (Unicode 1D153)
    "fillsemicircle"
  | 
    ## open semi-circle (Unicode 1D152)
    "semicircle"
  | 
    ## double whole open semi-circle (Mup)
    "dwsemicircle"
  | 
    ## filled slash (Mup)
    "fillslash"
  | 
    ## open slash (Mup)
    "slash"
  | 
    ## double whole open slash (Mup)
    "dwslash"
  | 
    ## X (Unicode 1D143)
    "x"
  | 
    ## note head not rendered (Unicode 1D159)
    "blank"
  | 
    ## X within circle (Unicode 1D145)
    "circlex"
  | 
    ## plus sign (Unicode 1D144)
    "cross"
  | 
    ## added diagonal slash (/) through default note head
    "addslash"
  | 
    ## added diagonal backslash (\) through default note head
    ##             (MusicXML)
    "addbackslash (MusicXML)"
data.ISODATE = wega.data.temporal.iso
data.ISOTIME = xsd:time
data.KEYSIGNATURE = xsd:token { pattern = "mixed|0|[1-7][f|s]" }
data.LAYERSCHEME =
  
  ## single layer
  "1"
  | 
    ## two layers with opposing stems
    "2o"
  | 
    ## two layers with 'floating' stems
    "2f"
  | 
    ##
    "3o"
  | 
    ##
    "3f"
data.MEASUREBEAT =
  xsd:token { pattern = "([0-9]+m\s*\+\s*)?[0-9]+(\.?[0-9]*)?" }
data.MEASUREMENT =
  xsd:token { pattern = "(\+|-)?\d+(\.\d+)?(cm|mm|in|pt|pc|vu)?" }
data.METERSIGN =
  
  ## common time; i.e. 4/4
  "common"
  | 
    ## cut time; i.e. 2/2
    "cut"
data.MODE =
  "major"
  | "minor"
  | "dorian"
  | "phrygian"
  | "lydian"
  | "mixolydian"
  | "aeolian"
  | "locrian"
data.MUSICFONT = xsd:token
data.OCTAVE = xsd:nonNegativeInteger { maxInclusive = "9" }
data.OCTAVE.DIS = xsd:positiveInteger { pattern = "8|15|22" }
data.OTHERSTAFF = "above" | "below"
data.PAGE.PANELS =
  xsd:positiveInteger { minInclusive = "1" maxInclusive = "2" }
data.PERCENT = xsd:token { pattern = "[0-9]+(\.?[0-9]*)?%" }
data.PGSCALE = data.PERCENT
data.PITCHNAME = xsd:token { pattern = "[a-g]" }
data.PITCHNAME.GES = xsd:token { pattern = "[a-g]|none" }
data.PITCHNUMBER = xsd:nonNegativeInteger
data.PLACE = "above" | "below"
data.SIZE =
  
  ## default size
  "normal"
  | 
    ## reduced size
    "cue"
data.SLASH =
  xsd:positiveInteger { minInclusive = "1" maxInclusive = "6" }
data.SLUR = xsd:token { pattern = "[i|m|t][1-6]" }
data.SLURS = list { data.SLUR+ }
data.STAFFLOC = xsd:integer
data.STAFFREL =
  
  ## written above staff
  "above"
  | 
    ## written below staff
    "below"
  | 
    ## written on staff
    "within"
data.STEMDIRECTION =
  
  ## stem points upward
  "up"
  | 
    ## stem points downward
    "down"
data.STEMMODIFIER =
  
  ## 1 slash through stem
  "1slash"
  | 
    ## 2 slashes through stem
    "2slash"
  | 
    ## 3 slashes through stem
    "3slash"
  | 
    ## 4 slashes through stem
    "4slash"
  | 
    ## 5 slashes through stem
    "5slash"
  | 
    ## 6 slashes through stem
    "6slash"
  | 
    ## X placed on stem
    "sprech"
  | 
    ## Z placed on stem
    "z"
data.STEMPOSITION =
  
  ## stem attached to left side of note head
  "left"
  | 
    ## stem attached to right side of note head
    "right"
  | 
    ## stem is originates from center of note head
    "center"
data.TEMPERAMENT =
  
  ## equal or 12-tone temperament
  "equal"
  | 
    ## just intonation
    "just"
  | 
    ## meantone intonation
    "mean"
  | 
    ## pythagorean tuning
    "pythagorean"
data.TEMPOVALUE = xsd:positiveInteger
data.TIE = xsd:token { pattern = "[i|m|t]" }
data.TIES = list { data.TIE+ }
data.TSTAMPOFFSET = xsd:decimal
data.TUPLET = xsd:token { pattern = "[i|m|t][1-6]" }
data.TUPLETS = list { data.TUPLET+ }
data.URI = xsd:anyURI
data.URIS = list { data.URI* }
macro.musicPart = (body | group)?
macro.availabilityPart = price?*, useRestrict?
macro.bibldescPart =
  editionStmt?, pubStmt?, physDesc?, physLoc*, seriesStmt?
data.DURATION.cmn =
  
  ## quadruple whole note
  "long"
  | 
    ## double whole note
    "breve"
  | 
    ## whole note
    "1"
  | 
    ## half note
    "2"
  | 
    ## quarter note
    "4"
  | 
    ## 8th note
    "8"
  | 
    ## 16th note
    "16"
  | 
    ## 32nd note
    "32"
  | 
    ## 64th note
    "64"
  | 
    ## 128th note
    "128"
  | 
    ## 256th note
    "256"
  | 
    ## 512th note
    "512"
  | 
    ## 1024th note
    "1024"
  | 
    ## 2048th note
    "2048"
data.ORNAM.cmn =
  xsd:token {
    pattern =
      "[A|a|b|I|i|K|k|M|m|N|n|S|s|T|t|O]|(A|a|S|s|K|k)?(T|t|M|m)(I|i|S|s)?"
  }
data.ORNAMS.cmn = list { data.ORNAM.cmn+ }
key.person.pattern = xsd:string { pattern = "H00\d{4}" }
key.work.pattern = xsd:string { pattern = "H02\d{4}" }
marcRelator.list =
  
  ## (Actor) A performer contributing to an expression of a work by acting as a cast member or player in a musical or dramatic presentation, etc.
  "act"
  | 
    ## (Arranger) A person, family, or organization contributing to a musical work by rewriting the composition for a medium of performance different from that for which the work was originally intended, or modifying the work for the same medium of performance, etc., such that the musical substance of the original composition remains essentially unchanged. For extensive modification that effectively results in the creation of a new musical work, see composer.
    "arr"
  | 
    ## (Associated name) A person or organization associated with or found in an item or collection, which cannot be determined to be that of a Former owner [fmo] or other designated relationship indicative of provenance.
    "asn"
  | 
    ## (Author) Use for a person or organization chiefly responsible for the intellectual or artistic content of a work, usually printed text. This term may also be used when more than one person or body bears such responsibility.
    "aut"
  | 
    ## (Collaborator)
    "clb"
  | 
    ## (Composer) Use for a person or organization who creates a musical work, usually a piece of music in manuscript or printed form.
    "cmp"
  | 
    ## (Creator) A person or organization responsible for the intellectual or artistic content of a resource
    "cre"
  | 
    ## (Dedicatee) Use for a person or organization to whom a book, manuscript, etc., is dedicated (not the recipient of a gift).
    "dte"
  | 
    ## (Engraver) A person or organization who cuts letters, figures, etc. on a surface, such as a wooden or metal plate used for printing.
    "egr"
  | 
    ## (Former owner) A person, family, or organization formerly having legal possession of an item
    "fmo"
  | 
    ## (Librettist) Use for a person or organization who is a writer of the text of an opera, oratorio, etc.
    "lbt"
  | 
    ## (Editor) Use for a person or organization who prepares for publication a work not primarily his/her own, such as by elucidating text, adding introductory or other critical matter, or technically directing an editorial staff.
    "edt"
  | 
    ## (Editorial Assistant) Use for a person who assisted in editing the text/score.
    "editorial_assistant"
  | 
    ## (Lyricist) Use for a person or organization who is a writer of the text of a song.
    "lyr"
  | 
    ## (Music copyist) A person who transcribes or copies musical notation.
    "mcp"
  | 
    ## (Performer) A person contributing to a resource by performing music, acting, dancing, speaking, etc., often in a musical or dramatic presentation, etc. If specific codes are used, [prf] is used for a person whose principal skill is not known or specified
    "prf"
  | 
    ## (Scribe) A person who is an amanuensis and for a writer of manuscripts proper.
    "scr"
  | 
    ## (Translator) Use for a person or organization who renders a text from one language into another, or from an older form of a language into the modern form.
    "trl"
wega.data.temporal.iso = xsd:date | xsd:gYear | xsd:gYearMonth
att.rel.attributes = att.rel.attribute.rel
att.rel.attribute.rel =
  
  ## Describes the relationship between the element's parent (subject) and the object pointed at. The values follow FRBR (see http://www.ifla.org/files/cataloguing/frbr/frbr_2008.pdf).
  attribute rel {
    
    ##
    "hasSuccessor"
    | 
      ##
      "isSuccessorOf"
    | 
      ##
      "hasSupplement"
    | 
      ##
      "isSupplementOf"
    | 
      ##
      "hasComplement"
    | 
      ##
      "isComplementOf"
    | 
      ##
      "hasSummarization"
    | 
      ##
      "isSummarizationOf"
    | 
      ##
      "hasAdaptation"
    | 
      ##
      "isAdaptationOf"
    | 
      ##
      "hasTransformation"
    | 
      ##
      "isTransformationOf"
    | 
      ##
      "hasImitation"
    | 
      ##
      "isImitationOf"
    | 
      ##
      "hasPart"
    | 
      ##
      "isPartOf"
    | 
      ##
      "hasReproduction"
    | 
      ##
      "isReproductionOf"
    | 
      ##
      "hasAbridgement"
    | 
      ##
      "isAbridgementOf"
    | 
      ##
      "hasRevision"
    | 
      ##
      "isRevisionOf"
    | 
      ##
      "hasTranslation"
    | 
      ##
      "isTranslationOf"
    | 
      ##
      "hasArrangement"
    | 
      ##
      "isArrangementOf"
    | 
      ##
      "hasAlternate"
    | 
      ##
      "isAlternateOf"
    | 
      ##
      "hasReconfiguration"
    | 
      ##
      "isReconfigurationOf"
    | 
      ##
      "hasRealization"
    | 
      ##
      "isRealizationOf"
    | 
      ##
      "hasEmbodiment"
    | 
      ##
      "isEmbodimentOf"
    | 
      ##
      "hasExemplar"
    | 
      ##
      "isExemplarOf"
  }
model.expressionLike = expression
model.itemLike = item
model.manifestationLike = source
model.relationLike = relation
componentGrp =
  
  ## (component group) – The child elements of this element are treated as parts of the elements header. Although this is an implicit way of expressing FRBR's hasPart / isPartOf -relationships, it avoids this terminology in order to prevent confusion with musical terminology. All children of a component must be the same type as its parent: works within work, items in item, etc.
  element componentGrp {
    (model.workLike*
     | model.expressionLike*
     | model.manifestationLike*
     | model.itemLike*)
    >> sch:pattern [
         id = "wegaWorks-componentGrp-checkComponentGrp-constraint-1"
         "\x{a}" ~
         "        "
         sch:rule [
           context = "mei:componentGrp"
           "\x{a}" ~
           "          "
           sch:assert [
             test =
               "every $i in ./child::mei:* satisfies $i/local-name() eq               ./parent::mei:*/local-name()"
             " Only child elements of the same name as the parent of\x{a}" ~
             "              the componentGrp-element are allowed. "
           ]
           "\x{a}" ~
           "        "
         ]
         "\x{a}" ~
         "      "
       ],
    att.common.attributes,
    empty
  }
expression =
  
  ## Intellectual or artistic realization of a work.
  element expression {
    model.identifierLike*,
    titleStmt?,
    model.workIdent*,
    history?,
    langUsage?,
    perfMedium?,
    extent?,
    contents?,
    notesStmt?,
    classification?,
    componentGrp?,
    relationList?,
    att.datapointing.attributes,
    att.common.attributes,
    att.bibl.attributes,
    empty
  }
expressionList =
  
  ## Gathers bibliographic expression entities.
  element expressionList {
    model.expressionLike*, att.common.attributes, empty
  }
item =
  
  ## Single instance or exemplar of a source/manifestation.
  element item {
    model.identifierLike*,
    macro.availabilityPart?,
    physDesc?,
    physLoc?,
    notesStmt?,
    classification?,
    componentGrp?,
    relationList?,
    att.datapointing.attributes,
    att.common.attributes,
    att.bibl.attributes,
    att.pointing.attributes,
    empty
  }
itemList =
  
  ## Gathers bibliographic item entities.
  element itemList { model.itemLike*, att.common.attributes, empty }
relation =
  
  ## A relation element describes the relationship between its parent and the object referenced by the relation element's target attribute. 
  element relation {
    empty,
    att.pointing.attributes,
    att.edit.attributes,
    att.rel.attributes,
    att.common.attributes,
    empty
  }
relationList =
  
  ## Gathers bibliographic relation elements.
  element relationList {
    model.relationLike*, att.common.attributes, empty
  }
att.accidental.attributes = att.accidental.attribute.accid
att.accidental.attribute.accid =
  
  ## captures a written accidental.
  attribute accid { data.ACCIDENTAL.EXPLICIT }?
att.accidental.performed.attributes =
  att.accidental.performed.attribute.accid.ges
att.accidental.performed.attribute.accid.ges =
  
  ## records the performed pitch inflection when it differs from the written accidental.
  attribute accid.ges { data.ACCIDENTAL.IMPLICIT }?
att.altsym.attributes = att.altsym.attribute.altsym
att.altsym.attribute.altsym =
  
  ## provides a way of pointing to a user-defined symbol. It must contain an ID of a <symbolDef> element elsewhere in the document.
  attribute altsym { data.URI }?
att.annot.anl.attributes = empty
att.annot.ges.attributes = att.duration.performed.attributes
att.annot.log.attributes =
  att.augmentdots.attributes,
  att.duration.additive.attributes,
  att.layerident.attributes,
  att.staffident.attributes,
  att.startendid.attributes,
  att.timestamp.musical.attributes,
  att.timestamp2.musical.attributes,
  att.timestamp.performed.attributes
att.annot.vis.attributes = empty
att.artic.anl.attributes = empty
att.artic.ges.attributes = empty
att.artic.log.attributes =
  att.articulation.attributes, att.controlevent.attributes
att.artic.vis.attributes =
  att.color.attributes,
  att.enclosingchars.attributes,
  att.placement.attributes,
  att.staffloc.attributes,
  att.visualoffset.attributes,
  att.xy.attributes
att.articulation.attributes = att.articulation.attribute.artic
att.articulation.attribute.artic =
  
  ## encodes the written articulation(s). Articulations are normally encoded in order from the note head outward; that is, away from the stem. See additional notes at att.vis.note. Only articulations should be encoded in the artic attribute; fingerings should be encoded using the <dir> element.
  attribute artic { data.ARTICULATIONS }?
att.articulation.performed.attributes =
  att.articulation.performed.attribute.artic.ges
att.articulation.performed.attribute.artic.ges =
  
  ## records performed articulation that differs from the written value.
  attribute artic.ges { data.ARTICULATIONS }?
att.augmentdots.attributes = att.augmentdots.attribute.dots
att.augmentdots.attribute.dots =
  
  ## records the number of augmentation dots required by a dotted duration.
  attribute dots { data.AUGMENTDOT }?
sch:pattern [
  id =
    "wegaWorks-att.augmentdots-dots-dots_attribute_requires_dur-constraint-2"
  "\x{a}" ~
  "    "
  sch:rule [
    context = "mei:*[@dots]"
    "\x{a}" ~
    "      "
    sch:assert [
      test = "@dur"
      "An element with a dots attribute must also have a dur\x{a}" ~
      "                  attribute."
    ]
    "\x{a}" ~
    "    "
  ]
  "\x{a}" ~
  "  "
]
att.authorized.attributes =
  att.authorized.attribute.authority, att.authorized.attribute.authURI
att.authorized.attribute.authority =
  
  ## a name or label associated with the controlled vocabulary from which the value is taken.
  attribute authority { text }?
att.authorized.attribute.authURI =
  
  ## the web-accessible location of the controlled vocabulary from which the value is taken.
  attribute authURI { data.URI }?
att.barplacement.attributes =
  att.barplacement.attribute.barplace,
  att.barplacement.attribute.taktplace
att.barplacement.attribute.barplace =
  
  ## records the location of a bar line.
  attribute barplace { data.BARPLACE }?
att.barplacement.attribute.taktplace =
  
  ## If takt bar lines are to be used, then the taktplace attribute may be used to denote the staff location of the shortened bar line. The location may include staff lines, spaces, and the spaces directly above and below the staff. The value ranges between 0 (just below the staff) to 2 * number of staff lines (directly above the staff). For example, on a 5-line staff the lines would be numbered 1,3,5,7, and 9 while the spaces would be numbered 0,2,4,6,8,10. For example, a value of '9' puts the bar line through the top line of a 5-line staff.
  attribute taktplace { data.STAFFLOC }?
att.beaming.vis.attributes =
  att.beaming.vis.attribute.beam.color,
  att.beaming.vis.attribute.beam.rend,
  att.beaming.vis.attribute.beam.slope
att.beaming.vis.attribute.beam.color =
  
  ## Color of beams, including those associated with tuplets.
  attribute beam.color { data.COLOR }?
att.beaming.vis.attribute.beam.rend =
  
  ## encodes whether a beam is "feathered" and in which direction.
  attribute beam.rend {
    
    ## beams lines grow farther apart from left to right.
    "acc"
    | 
      ## beam lines grow closer together from left to right.
      "rit"
    | 
      ## beam lines are equally-spaced over the entire length of the beam.
      "norm"
  }?
att.beaming.vis.attribute.beam.slope =
  
  ## captures beam slope.
  attribute beam.slope { xsd:decimal }?
att.bibl.attributes = att.bibl.attribute.analog
att.bibl.attribute.analog =
  
  ## contains a reference to a field or element in another descriptive encoding system to which this MEI element is comparable. 
  attribute analog { text }?
att.calendared.attributes = att.calendared.attribute.calendar
att.calendared.attribute.calendar =
  
  ## indicates the calendar system to which a date belongs, for example, Gregorian, Julian, Roman, Mosaic, Revolutionary, Islamic, etc.
  attribute calendar { xsd:NMTOKEN }?
att.canonical.attributes = att.canonical.attribute.dbkey
att.canonical.attribute.dbkey =
  
  ## used to record a value which serves as a primary key in an external database.
  attribute dbkey { xsd:NMTOKEN }?
att.chord.anl.attributes = empty
att.chord.ges.attributes =
  att.articulation.performed.attributes,
  att.duration.performed.attributes,
  att.instrumentident.attributes,
  att.chord.ges.cmn.attributes
att.chord.log.attributes =
  att.event.attributes,
  att.articulation.attributes,
  att.augmentdots.attributes,
  att.duration.musical.attributes,
  att.fermatapresent.attributes,
  att.syltext.attributes,
  att.slurpresent.attributes,
  att.tiepresent.attributes,
  att.tupletpresent.attributes,
  att.chord.log.cmn.attributes
att.chord.vis.attributes =
  att.altsym.attributes,
  att.color.attributes,
  att.relativesize.attributes,
  att.stemmed.attributes,
  att.visibility.attributes,
  att.visualoffset.ho.attributes,
  att.visualoffset.to.attributes,
  att.xy.attributes,
  att.chord.vis.cmn.attributes,
  att.chord.vis.attribute.cluster
att.chord.vis.attribute.cluster =
  
  ## indicates a single alternative note head should be displayed instead of individual note heads. See Read, p. 320-321, re: tone clusters.
  attribute cluster { data.CLUSTER }?
att.cleffing.log.attributes =
  att.cleffing.log.attribute.clef.shape,
  att.cleffing.log.attribute.clef.line,
  att.cleffing.log.attribute.clef.dis,
  att.cleffing.log.attribute.clef.dis.place
att.cleffing.log.attribute.clef.shape =
  
  ## encodes a value for the clef symbol.
  attribute clef.shape { data.CLEFSHAPE }?
att.cleffing.log.attribute.clef.line =
  
  ## contains a default value for the position of the clef. The value must be in the range between 1 and the number of lines on the staff. The numbering of lines starts with the lowest line of the staff.
  attribute clef.line { data.CLEFLINE }?
att.cleffing.log.attribute.clef.dis =
  
  ## records the amount of octave displacement to be applied to the clef.
  attribute clef.dis { data.OCTAVE.DIS }?
att.cleffing.log.attribute.clef.dis.place =
  
  ## records the direction of octave displacement to be applied to the clef.
  attribute clef.dis.place { data.PLACE }?
att.cleffing.vis.attributes =
  att.cleffing.vis.attribute.clef.color,
  att.cleffing.vis.attribute.clef.visible
att.cleffing.vis.attribute.clef.color =
  
  ## describes the color of the clef.
  attribute clef.color { data.COLOR }?
att.cleffing.vis.attribute.clef.visible =
  
  ## determines whether the clef is to be displayed.
  attribute clef.visible { data.BOOLEAN }?
att.coded.attributes = att.coded.attribute.code
att.coded.attribute.code =
  
  ## captures one or more coded values for the textual content of this element.
  attribute code { xsd:NMTOKENS }?
att.color.attributes = att.color.attribute.color
att.color.attribute.color =
  
  ## used to indicate visual appearance. Do not confuse this with the musical term 'color' as used in pre-CMN notation.
  attribute color { data.COLOR }?
att.coloration.attributes = att.coloration.attribute.colored
att.coloration.attribute.colored =
  
  ## indicates this feature is 'colored'; that is, it is a participant in a change in rhythmic values. In mensural notation, coloration is indicated by colored notes (red, black, etc.) where void notes would otherwise occur. In CMN, coloration is indicated by an inverse color; that is, the note head is void when it would otherwise be filled and vice versa.
  attribute colored { data.BOOLEAN }?
att.common.attributes =
  att.id.attributes,
  att.common.attribute.label,
  att.common.attribute.n,
  att.common.attribute.xmlbase
att.common.attribute.label =
  
  ## provides a label for an element. The value may be any string.
  attribute label { text }?
att.common.attribute.n =
  
  ## provides a name or number designation for an element. While the value need not be unique, it is required to be a single token.
  attribute n { xsd:NMTOKEN }?
att.common.attribute.xmlbase =
  
  ## provides a base URI reference with which applications can resolve relative URI references into absolute URI references.
  attribute xml:base { data.URI }?
att.controlevent.attributes =
  att.plist.attributes,
  att.timestamp.musical.attributes,
  att.timestamp.performed.attributes,
  att.staffident.attributes,
  att.layerident.attributes
att.curvature.attributes =
  att.curvature.attribute.bezier,
  att.curvature.attribute.bulge,
  att.curvature.attribute.curvedir
att.curvature.attribute.bezier =
  
  ## records the placement of Bezier control points as a series of space-separated xy coordinates, e.g., 19 45 -32 118.
  attribute bezier { text }?
att.curvature.attribute.bulge =
  
  ## describes a curve as a set of distance values above or below an imaginary line connecting the endpoints of the curve. The bulge attribute must contain one or more decimal values expressed in inter-line units.
  attribute bulge { text }?
att.curvature.attribute.curvedir =
  
  ## describes a curve with a generic term indicating the direction of curvature.
  attribute curvedir {
    
    ## upward curve.
    "above"
    | 
      ## downward curve.
      "below"
  }?
att.curverend.attributes = att.curverend.attribute.rend
att.curverend.attribute.rend =
  
  ## describes the line style of the curve.
  attribute rend { data.CURVERENDITION }?
att.datable.attributes =
  att.datable.attribute.enddate,
  att.datable.attribute.isodate,
  att.datable.attribute.notafter,
  att.datable.attribute.notbefore,
  att.datable.attribute.startdate
att.datable.attribute.enddate =
  
  ## contains the end point of a date range in standard ISO form.
  attribute enddate { data.ISODATE }?
att.datable.attribute.isodate =
  
  ## provides the value of a textual date in standard ISO form.
  attribute isodate { data.ISODATE }?
att.datable.attribute.notafter =
  
  ## contains an upper boundary for an uncertain date in standard ISO form.
  attribute notafter { data.ISODATE }?
att.datable.attribute.notbefore =
  
  ## contains a lower boundary, in standard ISO form, for an uncertain date.
  attribute notbefore { data.ISODATE }?
att.datable.attribute.startdate =
  
  ## contains the starting point of a date range in standard ISO form.
  attribute startdate { data.ISODATE }?
att.datapointing.attributes = att.datapointing.attribute.data
att.datapointing.attribute.data =
  
  ## used to link metadata elements to one or more data-containing elements.
  attribute data { data.URIS }?
att.declaring.attributes = att.declaring.attribute.decls
att.declaring.attribute.decls =
  
  ## identifies one or more metadata elements within the header, which are understood to apply to the element bearing this attribute and its content.
  attribute decls { data.URIS }?
att.dir.anl.attributes = empty
att.dir.ges.attributes = att.duration.performed.attributes
att.dir.log.attributes =
  att.controlevent.attributes,
  att.augmentdots.attributes,
  att.duration.additive.attributes,
  att.startendid.attributes,
  att.timestamp2.musical.attributes
att.dir.vis.attributes =
  att.placement.attributes,
  att.visualoffset.attributes,
  att.visualoffset2.ho.attributes,
  att.visualoffset2.to.attributes,
  att.xy.attributes
att.distances.attributes =
  att.distances.attribute.dynam.dist,
  att.distances.attribute.harm.dist,
  att.distances.attribute.text.dist
att.distances.attribute.dynam.dist =
  
  ## records the default distance from the staff for dynamic marks.
  attribute dynam.dist { data.MEASUREMENT }?
att.distances.attribute.harm.dist =
  
  ## records the default distance from the staff of harmonic indications, such as guitar chord grids or functional labels.
  attribute harm.dist { data.MEASUREMENT }?
att.distances.attribute.text.dist =
  
  ## determines how far from the staff to render text elements.
  attribute text.dist { data.MEASUREMENT }?
att.duration.additive.attributes = att.duration.additive.attribute.dur
att.duration.additive.attribute.dur =
  
  ## records duration using ident dotted, relative durational values provided by the data.DURATION datatype. When the duration is "irrational", as is sometimes the case with tuplets, multiple space-separated values that add up to the total duration may be used. When dotted values are present, the dots attribute must be ignored.
  attribute dur { data.DURATION.additive }?
sch:pattern [
  id =
    "wegaWorks-att.duration.additive-dur-ignore_dots_attribute-constraint-3"
  "\x{a}" ~
  "    "
  sch:rule [
    context = "mei:*[contains(@dur, '.')]"
    "\x{a}" ~
    "      "
    sch:assert [
      test = "not(@dots)"
      "An element with a dur attribute that contains dotted\x{a}" ~
      "                  values must not have a dots attribute."
    ]
    "\x{a}" ~
    "    "
  ]
  "\x{a}" ~
  "  "
]
att.duration.default.attributes =
  att.duration.default.attribute.dur.default,
  att.duration.default.attribute.num.default,
  att.duration.default.attribute.numbase.default
att.duration.default.attribute.dur.default =
  
  ## contains a default duration in those situations when the first note, rest, chord, etc. in a measure does not have a duration specified.
  attribute dur.default { data.DURATION }?
att.duration.default.attribute.num.default =
  
  ## along with numbase.default, describes the default duration as a ratio. num.default is the first value in the ratio.
  attribute num.default { xsd:positiveInteger }?
att.duration.default.attribute.numbase.default =
  
  ## along with num.default, describes the default duration as a ratio. numbase.default is the second value in the ratio.
  attribute numbase.default { xsd:positiveInteger }?
att.duration.musical.attributes = att.duration.musical.attribute.dur
att.duration.musical.attribute.dur =
  
  ## records the duration of a feature using the relative durational values provided by the data.DURATION datatype.
  attribute dur { data.DURATION }?
att.duration.performed.attributes =
  att.duration.performed.attribute.dur.ges
att.duration.performed.attribute.dur.ges =
  
  ## records performed duration information that differs from the written duration. Its value may be expressed in several forms; that is, ppq (MIDI clicks and MusicXML 'divisions'), Humdrum **recip values, beats, seconds, or mensural duration values.
  attribute dur.ges { data.DURATION.gestural }?
att.duration.ratio.attributes =
  att.duration.ratio.attribute.num, att.duration.ratio.attribute.numbase
att.duration.ratio.attribute.num =
  
  ## along with numbase, describes duration as a ratio. num is the first value in the ratio, while numbase is the second.
  attribute num { xsd:positiveInteger }?
att.duration.ratio.attribute.numbase =
  
  ## along with num, describes duration as a ratio. num is the first value in the ratio, while numbase is the second.
  attribute numbase { xsd:positiveInteger }?
att.dynam.anl.attributes = empty
att.dynam.ges.attributes = att.duration.performed.attributes
att.dynam.log.attributes =
  att.controlevent.attributes,
  att.augmentdots.attributes,
  att.duration.additive.attributes,
  att.startendid.attributes,
  att.timestamp2.musical.attributes
att.dynam.vis.attributes =
  att.placement.attributes,
  att.visualoffset.attributes,
  att.visualoffset2.ho.attributes,
  att.visualoffset2.to.attributes,
  att.xy.attributes
att.enclosingchars.attributes = att.enclosingchars.attribute.enclose
att.enclosingchars.attribute.enclose =
  
  ## records the characters often used to mark accidentals, articulations, and sometimes notes as having a cautionary or editorial function. For an example of cautionary accidentals enclosed in parentheses, see Read, p. 131, ex. 9-14.
  attribute enclose { data.ENCLOSURE }?
att.event.attributes =
  att.timestamp.musical.attributes,
  att.timestamp.performed.attributes,
  att.staffident.attributes,
  att.layerident.attributes
att.fermatapresent.attributes = att.fermatapresent.attribute.fermata
att.fermatapresent.attribute.fermata =
  
  ## indicates the attachment of a fermata to this element. If visual information about the fermata needs to be recorded, then a <fermata> element should be employed instead.
  attribute fermata { data.PLACE }?
att.handident.attributes = att.handident.attribute.hand
att.handident.attribute.hand =
  
  ## signifies the hand responsible for an action. The value must be the ID of a <hand> element declared in the header.
  attribute hand { data.URI }?
att.id.attributes = att.id.attribute.xmlid
att.id.attribute.xmlid =
  
  ## regularizes the naming of an element and thus facilitates building links between it and other resources. Each id attribute within a document must have a unique value.
  attribute xml:id { xsd:ID }?
att.instrumentident.attributes = att.instrumentident.attribute.instr
att.instrumentident.attribute.instr =
  
  ## provides a way of pointing to a MIDI instrument definition. It must contain the ID of an <instrDef> element elsewhere in the document.
  attribute instr { data.URI }?
att.internetmedia.attributes = att.internetmedia.attribute.mimetype
att.internetmedia.attribute.mimetype =
  
  ## specifies the applicable MIME (multimedia internet mail extension) type. The value should be a valid MIME media type defined by the Internet Engineering Task Force in RFC 2046.
  attribute mimetype { text }?
att.joined.attributes = att.joined.attribute.join
att.joined.attribute.join =
  
  ## used for linking visually separate entities that form a single logical entity, for example, multiple slurs broken across a system break that form a single musical phrase. Also used to indicate a measure which metrically completes the current one. Record the identifiers of the separately encoded components, excluding the one carrying the attribute.
  attribute join { data.URIS }?
att.keySigDefault.log.attributes =
  att.keySigDefault.log.attribute.key.accid,
  att.keySigDefault.log.attribute.key.mode,
  att.keySigDefault.log.attribute.key.pname,
  att.keySigDefault.log.attribute.key.sig,
  att.keySigDefault.log.attribute.key.sig.mixed
att.keySigDefault.log.attribute.key.accid =
  
  ## contains an accidental for the tonic key, if one is required, e.g., if key.pname equals 'c' and key.accid equals 's', then a tonic of C# is indicated.
  attribute key.accid { data.ACCIDENTAL.IMPLICIT }?
att.keySigDefault.log.attribute.key.mode =
  
  ## indicates major, minor, or other tonality.
  attribute key.mode { data.MODE }?
att.keySigDefault.log.attribute.key.pname =
  
  ## holds the pitch name of the tonic key, e.g. 'c' for the key of C.
  attribute key.pname { data.PITCHNAME }?
att.keySigDefault.log.attribute.key.sig =
  
  ## indicates where the key lies in the circle of fifths.
  attribute key.sig { data.KEYSIGNATURE }?
att.keySigDefault.log.attribute.key.sig.mixed =
  
  ## Mixed key signatures, e.g. those consisting of a mixture of flats and sharps (Read, p. 143, ex. 9-39), and key signatures with unorthodox placement of the accidentals (Read, p. 141) must be indicated by setting the key.sig attribute to 'mixed' and providing explicit key signature information in the key.sig.mixed attribute or in the <keySig> element. It is intended that key.sig.mixed contain a series of tokens with each token containing pitch name, accidental, and octave, such as 'A4 Cs5 Ef5' that indicate what key accidentals should be rendered and where they should be placed.
  attribute key.sig.mixed {
    list {
      xsd:token {
        pattern = "[a-g][0-9](\-{1,3}|f{1,3}|#{1,3}|s{1,3}|x)"
      }+
    }
  }?
att.keySigDefault.vis.attributes =
  att.keySigDefault.vis.attribute.key.sig.show,
  att.keySigDefault.vis.attribute.key.sig.showchange
att.keySigDefault.vis.attribute.key.sig.show =
  
  ## indicates whether the key signature should be displayed.
  attribute key.sig.show { data.BOOLEAN }?
att.keySigDefault.vis.attribute.key.sig.showchange =
  
  ## determines whether cautionary accidentals should be displayed at a key change.
  attribute key.sig.showchange { data.BOOLEAN }?
att.labels.addl.attributes = att.labels.addl.attribute.label.abbr
att.labels.addl.attribute.label.abbr =
  
  ## provides a label for a group of staves on pages after the first page. Usually, this label takes an abbreviated form.
  attribute label.abbr { text }?
att.lang.attributes = att.lang.attribute.xmllang
att.lang.attribute.xmllang =
  
  ## identifies the language of the element's content. The values for this attribute are language 'tags' as defined in BCP 47. All language tags that make use of private use sub-tags must be documented in a corresponding language element in the MEI header whose id attribute is the same as the language tag's value.
  attribute xml:lang { xsd:language }?
att.layer.anl.attributes = empty
att.layer.ges.attributes = empty
att.layer.log.attributes =
  att.meterconformance.attributes, att.layer.log.attribute.def
att.layer.log.attribute.def =
  
  ## provides a mechanism for linking the layer to a layerDef element.
  attribute def { data.URI }?
att.layer.vis.attributes = att.visibility.attributes
att.layerident.attributes = att.layerident.attribute.layer
att.layerident.attribute.layer =
  
  ## identifies the layer to which a feature applies.
  attribute layer {
    list { xsd:positiveInteger+ }
  }?
att.lyricstyle.attributes =
  att.lyricstyle.attribute.lyric.align,
  att.lyricstyle.attribute.lyric.fam,
  att.lyricstyle.attribute.lyric.name,
  att.lyricstyle.attribute.lyric.size,
  att.lyricstyle.attribute.lyric.style,
  att.lyricstyle.attribute.lyric.weight
att.lyricstyle.attribute.lyric.align =
  
  ## describes the alignment of lyric syllables associated with a note or chord.
  attribute lyric.align { data.MEASUREMENT }?
att.lyricstyle.attribute.lyric.fam =
  
  ## sets the font family default value for lyrics.
  attribute lyric.fam { data.FONTFAMILY }?
att.lyricstyle.attribute.lyric.name =
  
  ## sets the font name default value for lyrics.
  attribute lyric.name { data.FONTNAME }?
att.lyricstyle.attribute.lyric.size =
  
  ## sets the default font size value for lyrics.
  attribute lyric.size { data.FONTSIZE }?
att.lyricstyle.attribute.lyric.style =
  
  ## sets the default font style value for lyrics.
  attribute lyric.style { data.FONTSTYLE }?
att.lyricstyle.attribute.lyric.weight =
  
  ## sets the default font weight value for lyrics.
  attribute lyric.weight { data.FONTWEIGHT }?
att.measure.anl.attributes = att.joined.attributes
att.measure.ges.attributes = att.timestamp.performed.attributes
att.measure.log.attributes =
  att.meterconformance.bar.attributes,
  att.measure.log.attribute.left,
  att.measure.log.attribute.right
att.measure.log.attribute.left =
  
  ## indicates the visual rendition of the left bar line. It is present here only for facilitation of translation from legacy encodings which use it. Usually, it can be safely ignored.
  attribute left { data.BARRENDITION }?
att.measure.log.attribute.right =
  
  ## indicates the function of the right bar line and is structurally important.
  attribute right { data.BARRENDITION }?
att.measurement.attributes = att.measurement.attribute.unit
att.measurement.attribute.unit =
  
  ## Gibt die zugrundeliegende Einheit für das markierte Maß an.
  attribute unit {
    
    ## (Seite) das Element enthält eine Seitenzahl oder einen Seitenbereich.
    "pp"
    | 
      ## (Band) das Element enthält eine Bandnummer
      "vol"
    | 
      ## (Spalte) das Element enthält eine Spaltenzahl oder einen Spaltenbereich.
      "col"
    | 
      ## (Folio) das Element enthält eine Foliozahl oder einen Foliobereich.
      "fol"
    | 
      ## (Zentimeter) das Element enthält eine Zentimeterangabe.
      "cm"
  }?
att.medium.attributes = att.medium.attribute.medium
att.medium.attribute.medium =
  
  ## describes the writing medium.
  attribute medium { text }?
att.meiversion.attributes =
  att.meiversion.attribute.meiversion,
  att.meiversion.attribute.meiversion.num
att.meiversion.attribute.meiversion =
  
  ## specifies a generic MEI version label.
  [ a:defaultValue = "2013" ]
  attribute meiversion {
    
    ## this version of MEI.
    "2013"
  }?
att.meiversion.attribute.meiversion.num =
  
  ## records a detailed MEI version number.
  [ a:defaultValue = "2.1.0" ]
  attribute meiversion.num {
    
    ## this version of MEI.
    "2.1.0"
  }?
att.meterconformance.attributes = att.meterconformance.attribute.metcon
att.meterconformance.attribute.metcon =
  
  ## indicates the relationship between the content of a staff or layer and the prevailing meter.
  attribute metcon {
    
    ## conformant with the prevailing meter.
    "c"
    | 
      ## incomplete; i.e., not enough beats.
      "i"
    | 
      ## overfull; i.e., too many beats.
      "o"
  }?
att.meterconformance.bar.attributes =
  att.meterconformance.bar.attribute.metcon,
  att.meterconformance.bar.attribute.control
att.meterconformance.bar.attribute.metcon =
  
  ## indicates the relationship between the content of a measure and the prevailing meter.
  attribute metcon { data.BOOLEAN }?
att.meterconformance.bar.attribute.control =
  
  ## indicates whether or not a bar line is "controlling"; that is, if it indicates a point of alignment across all the parts. Bar lines within a score are usually controlling; that is, they "line up". Bar lines within parts may or may not be controlling. When applied to <measure>, this attribute indicates the nature of the right barline but not the left.
  attribute control { data.BOOLEAN }?
att.meterSigDefault.log.attributes =
  att.meterSigDefault.log.attribute.meter.count,
  att.meterSigDefault.log.attribute.meter.unit
att.meterSigDefault.log.attribute.meter.count =
  
  ## captures the number of beats in a measure, that is, the top number of the meter signature. It must contain a decimal number or an additive expression that evaluates to a decimal number, such as 2+3.
  attribute meter.count {
    xsd:string { pattern = "\d+(\.\d+)?(\s*\+\s*\d+(\.\d+)?)*" }
  }?
att.meterSigDefault.log.attribute.meter.unit =
  
  ## contains the number indicating the beat unit, that is, the bottom number of the meter signature.
  attribute meter.unit { xsd:decimal }?
att.meterSigDefault.vis.attributes =
  att.meterSigDefault.vis.attribute.meter.rend,
  att.meterSigDefault.vis.attribute.meter.showchange,
  att.meterSigDefault.vis.attribute.meter.sym
att.meterSigDefault.vis.attribute.meter.rend =
  
  ## contains an indication of how the meter signature should be rendered.
  attribute meter.rend {
    
    ## show only the number of beats.
    "num"
    | 
      ## the lower number in the meter signature is replaced by a note symbol.
      "denomsym"
    | 
      ## meter signature rendered using traditional numeric values.
      "norm"
    | 
      ## meter signature not rendered.
      "invis"
  }?
att.meterSigDefault.vis.attribute.meter.showchange =
  
  ## determines whether a new meter signature should be displayed when the meter signature changes.
  attribute meter.showchange { data.BOOLEAN }?
att.meterSigDefault.vis.attribute.meter.sym =
  
  ## indicates the use of a meter symbol instead of a numeric meter signature, that is, 'C' for common time or 'C' with a slash for cut time.
  attribute meter.sym { data.METERSIGN }?
att.mmtempo.attributes =
  att.mmtempo.attribute.mm,
  att.mmtempo.attribute.mm.unit,
  att.mmtempo.attribute.mm.dots
att.mmtempo.attribute.mm =
  
  ## used to describe tempo in terms of beats (often the meter signature denominator) per minute, ala M.M. (Maezel's Metronome).
  attribute mm { data.TEMPOVALUE }?
att.mmtempo.attribute.mm.unit =
  
  ## captures the metronomic unit.
  attribute mm.unit { data.DURATION }?
att.mmtempo.attribute.mm.dots =
  
  ## records the number of augmentation dots required by a dotted metronome unit.
  attribute mm.dots { data.AUGMENTDOT }?
att.multinummeasures.attributes =
  att.multinummeasures.attribute.multi.number
att.multinummeasures.attribute.multi.number =
  
  ## indicates whether programmatically calculated counts of multiple measures of rest (mRest) and whole measure repeats (mRpt) in parts should be rendered.
  attribute multi.number { data.BOOLEAN }?
att.name.attributes =
  att.authorized.attributes,
  att.canonical.attributes,
  att.name.attribute.nymref,
  att.name.attribute.role
att.name.attribute.nymref =
  
  ## used to record a pointer to the regularized form of the name elsewhere in the document.
  attribute nymref { data.URI }?
att.name.attribute.role =
  
  ## used to specify further information about the entity referenced by this name, for example, the occupation of a person or the status of a place.
  attribute role { text }?
att.note.anl.attributes = empty
att.note.ges.attributes =
  att.accidental.performed.attributes,
  att.articulation.performed.attributes,
  att.duration.performed.attributes,
  att.instrumentident.attributes,
  att.note.ges.cmn.attributes,
  att.note.ges.attribute.oct.ges,
  att.note.ges.attribute.pname.ges,
  att.note.ges.attribute.pnum
att.note.ges.attribute.oct.ges =
  
  ## records performed octave information that differs from the written value.
  attribute oct.ges { data.OCTAVE }?
att.note.ges.attribute.pname.ges =
  
  ## contains a performed pitch name that differs from the written value.
  attribute pname.ges { data.PITCHNAME.GES }?
att.note.ges.attribute.pnum =
  
  ## holds a pitch-to-number mapping, a base-40 or MIDI note number, for example.
  attribute pnum { data.PITCHNUMBER }?
att.note.log.attributes =
  att.event.attributes,
  att.accidental.attributes,
  att.articulation.attributes,
  att.augmentdots.attributes,
  att.duration.musical.attributes,
  att.fermatapresent.attributes,
  att.pitched.attributes,
  att.syltext.attributes,
  att.slurpresent.attributes,
  att.tiepresent.attributes,
  att.tupletpresent.attributes,
  att.note.log.cmn.attributes
att.note.vis.attributes =
  att.altsym.attributes,
  att.color.attributes,
  att.coloration.attributes,
  att.enclosingchars.attributes,
  att.relativesize.attributes,
  att.staffloc.attributes,
  att.stemmed.attributes,
  att.visibility.attributes,
  att.visualoffset.ho.attributes,
  att.visualoffset.to.attributes,
  att.xy.attributes,
  att.note.vis.cmn.attributes,
  att.note.vis.attribute.headshape
att.note.vis.attribute.headshape =
  
  ## used to override the head shape normally used for the given duration.
  attribute headshape { data.HEADSHAPE }?
att.octave.attributes = att.octave.attribute.oct
att.octave.attribute.oct =
  
  ## captures written octave information.
  attribute oct { data.OCTAVE }?
att.octavedefault.attributes =
  att.octavedefault.attribute.octave.default
att.octavedefault.attribute.octave.default =
  
  ## contains a default octave specification for use when the first note, rest, chord, etc. in a measure does not have an octave value specified.
  attribute octave.default { data.OCTAVE }?
att.onelinestaff.attributes = att.onelinestaff.attribute.ontheline
att.onelinestaff.attribute.ontheline =
  
  ## determines the placement of notes on a 1-line staff. A value of 'true' places all notes on the line, while a value of 'false' places stems-up notes above the line and stems-down notes below the line.
  attribute ontheline { data.BOOLEAN }?
att.pitch.attributes = att.pitch.attribute.pname
att.pitch.attribute.pname =
  
  ## contains a written pitch name.
  attribute pname { data.PITCHNAME }?
att.pitched.attributes = att.pitch.attributes, att.octave.attributes
att.placement.attributes = att.placement.attribute.place
att.placement.attribute.place =
  
  ## captures the placement of the item with respect to the staff with which it is associated.
  attribute place { data.STAFFREL }?
att.plist.attributes =
  att.plist.attribute.plist, att.plist.attribute.evaluate
att.plist.attribute.plist =
  
  ## contains a space separated list of references that identify logical events that participate in a collection, such as notes under a phrase mark.
  attribute plist { data.URIS }?
att.plist.attribute.evaluate =
  
  ## specifies the intended meaning when the target of a pointer is itself a pointer.
  attribute evaluate {
    
    ## if the element pointed to is itself a pointer, then the target of that pointer will be taken, and so on, until an element is found which is not a pointer.
    "all"
    | 
      ## if the element pointed to is itself a pointer, then its target (whether a pointer or not) is taken as the target of this pointer.
      "one"
    | 
      ## no further evaluation of targets is carried out beyond that needed to find the element specified in the pointer's target.
      "none"
  }?
att.pointing.attributes =
  att.pointing.attribute.xlinkactuate,
  att.pointing.attribute.xlinkrole,
  att.pointing.attribute.xlinkshow,
  att.pointing.attribute.target,
  att.pointing.attribute.targettype,
  att.pointing.attribute.xlinktitle
att.pointing.attribute.xlinkactuate =
  
  ## defines whether a link occurs automatically or must be requested by the user.
  attribute xlink:actuate {
    
    ## load the target resource immediately.
    "onLoad"
    | 
      ## load the target resource upon user request.
      "onRequest"
    | 
      ## do not permit loading of the target resource.
      "none"
    | 
      ## behavior other than allowed by the other values of this attribute.
      "other"
  }?
att.pointing.attribute.xlinkrole =
  
  ## indicates a property of the entire link. The value of the role attribute must be a URI.
  attribute xlink:role { data.URI }?
att.pointing.attribute.xlinkshow =
  
  ## defines how a remote resource is rendered.
  attribute xlink:show {
    
    ## open in a new window.
    "new"
    | 
      ## load the referenced resource in the same window.
      "replace"
    | 
      ## embed the referenced resource at the point of the link.
      "embed"
    | 
      ## do not permit traversal to the referenced resource.
      "none"
    | 
      ## behavior other than permitted by the other values of this attribute.
      "other"
  }?
att.pointing.attribute.target =
  
  ## allows the use of one or more previously-undeclared URIs to identify an external electronic object.
  attribute target { data.URIS }?
att.pointing.attribute.targettype =
  
  ## in contrast with the role attribute, allows the target resource to be characterized using any convenient classification scheme or typology.
  attribute targettype { xsd:NMTOKEN }?
att.pointing.attribute.xlinktitle =
  
  ## contains a human-readable description of the entire link.
  attribute xlink:title { text }?
att.relativesize.attributes = att.relativesize.attribute.size
att.relativesize.attribute.size =
  
  ## describes the relative size of a feature.
  attribute size { data.SIZE }?
att.responsibility.attributes = att.responsibility.attribute.resp
att.responsibility.attribute.resp =
  
  ## captures information regarding responsibility for some aspect of the text's creation, transcription, editing, or encoding. Its value must point to one or more identifiers declared in the document header.
  attribute resp { data.URIS }?
att.rest.anl.attributes = empty
att.rest.ges.attributes =
  att.duration.performed.attributes, att.instrumentident.attributes
att.rest.log.attributes =
  att.augmentdots.attributes,
  att.event.attributes,
  att.duration.musical.attributes,
  att.fermatapresent.attributes,
  att.tupletpresent.attributes,
  att.rest.log.cmn.attributes
att.rest.vis.attributes =
  att.altsym.attributes,
  att.color.attributes,
  att.enclosingchars.attributes,
  att.relativesize.attributes,
  att.rest.vis.cmn.attributes,
  att.staffloc.attributes,
  att.staffloc.pitched.attributes,
  att.visualoffset.attributes,
  att.xy.attributes
att.scalable.attributes = att.scalable.attribute.scale
att.scalable.attribute.scale =
  
  ## scale factor to be applied to the feature to make it the desired display size.
  attribute scale { data.PERCENT }?
att.score.anl.attributes = empty
att.score.ges.attributes = empty
att.score.log.attributes = empty
att.score.vis.attributes = empty
att.scoreDef.anl.attributes = empty
att.scoreDef.ges.attributes =
  att.mmtempo.attributes,
  att.scoreDef.ges.attribute.tune.pname,
  att.scoreDef.ges.attribute.tune.Hz,
  att.scoreDef.ges.attribute.tune.temper
att.scoreDef.ges.attribute.tune.pname =
  
  ## holds the pitch name of a tuning reference pitch.
  attribute tune.pname { data.PITCHNAME }?
att.scoreDef.ges.attribute.tune.Hz =
  
  ## holds a value for cycles per second, i.e., Hertz, for a tuning reference pitch.
  attribute tune.Hz { xsd:decimal }?
att.scoreDef.ges.attribute.tune.temper =
  
  ## provides an indication of the tuning system, 'just', for example.
  attribute tune.temper { data.TEMPERAMENT }?
att.scoreDef.log.attributes =
  att.cleffing.log.attributes,
  att.duration.default.attributes,
  att.keySigDefault.log.attributes,
  att.meterSigDefault.log.attributes,
  att.octavedefault.attributes,
  att.transposition.attributes,
  att.scoreDef.log.cmn.attributes
att.scoreDef.vis.attributes =
  att.barplacement.attributes,
  att.cleffing.vis.attributes,
  att.distances.attributes,
  att.keySigDefault.vis.attributes,
  att.lyricstyle.attributes,
  att.meterSigDefault.vis.attributes,
  att.multinummeasures.attributes,
  att.onelinestaff.attributes,
  att.textstyle.attributes,
  att.scoreDef.vis.cmn.attributes,
  att.scoreDef.vis.attribute.ending.rend,
  att.scoreDef.vis.attribute.mnum.visible,
  att.scoreDef.vis.attribute.music.name,
  att.scoreDef.vis.attribute.music.size,
  att.scoreDef.vis.attribute.optimize,
  att.scoreDef.vis.attribute.page.height,
  att.scoreDef.vis.attribute.page.width,
  att.scoreDef.vis.attribute.page.topmar,
  att.scoreDef.vis.attribute.page.botmar,
  att.scoreDef.vis.attribute.page.leftmar,
  att.scoreDef.vis.attribute.page.rightmar,
  att.scoreDef.vis.attribute.page.panels,
  att.scoreDef.vis.attribute.page.scale,
  att.scoreDef.vis.attribute.spacing.packexp,
  att.scoreDef.vis.attribute.spacing.packfact,
  att.scoreDef.vis.attribute.spacing.staff,
  att.scoreDef.vis.attribute.spacing.system,
  att.scoreDef.vis.attribute.system.leftmar,
  att.scoreDef.vis.attribute.system.rightmar,
  att.scoreDef.vis.attribute.system.topmar,
  att.scoreDef.vis.attribute.vu.height
att.scoreDef.vis.attribute.ending.rend =
  
  ## describes where ending marks should be displayed.
  attribute ending.rend {
    
    ## ending rendered only above top staff.
    "top"
    | 
      ## ending rendered above staves that have bar lines drawn across them.
      "barred"
    | 
      ## endings rendered above staff groups.
      "grouped"
  }?
att.scoreDef.vis.attribute.mnum.visible =
  
  ## indicates whether measure numbers should be displayed.
  attribute mnum.visible { data.BOOLEAN }?
att.scoreDef.vis.attribute.music.name =
  
  ## sets the default music font name.
  attribute music.name { data.MUSICFONT }?
att.scoreDef.vis.attribute.music.size =
  
  ## sets the default music font size.
  attribute music.size { data.FONTSIZE }?
att.scoreDef.vis.attribute.optimize =
  
  ## indicates whether staves without notes, rests, etc. should be displayed. When the value is 'true', empty staves are displayed.
  attribute optimize { data.BOOLEAN }?
att.scoreDef.vis.attribute.page.height =
  
  ## specifies the height of the page; may be expressed in real-world units or staff steps.
  attribute page.height { data.MEASUREMENT }?
att.scoreDef.vis.attribute.page.width =
  
  ## describes the width of the page; may be expressed in real-world units or staff steps.
  attribute page.width { data.MEASUREMENT }?
att.scoreDef.vis.attribute.page.topmar =
  
  ## indicates the amount of whitespace at the top of a page.
  attribute page.topmar { data.MEASUREMENT }?
att.scoreDef.vis.attribute.page.botmar =
  
  ## indicates the amount of whitespace at the bottom of a page.
  attribute page.botmar { data.MEASUREMENT }?
att.scoreDef.vis.attribute.page.leftmar =
  
  ## indicates the amount of whitespace at the left side of a page.
  attribute page.leftmar { data.MEASUREMENT }?
att.scoreDef.vis.attribute.page.rightmar =
  
  ## indicates the amount of whitespace at the right side of a page.
  attribute page.rightmar { data.MEASUREMENT }?
att.scoreDef.vis.attribute.page.panels =
  
  ## indicates the number of logical pages to be rendered on a single physical page.
  attribute page.panels { data.PAGE.PANELS }?
att.scoreDef.vis.attribute.page.scale =
  
  ## indicates how the page should be scaled when rendered.
  attribute page.scale { data.PGSCALE }?
att.scoreDef.vis.attribute.spacing.packexp =
  
  ## describes a note's spacing relative to its time value.
  attribute spacing.packexp { xsd:decimal }?
att.scoreDef.vis.attribute.spacing.packfact =
  
  ## describes the note spacing of output.
  attribute spacing.packfact { xsd:decimal }?
att.scoreDef.vis.attribute.spacing.staff =
  
  ## specifies the minimum amount of space between adjacent staves in the same system; measured from the bottom line of the staff above to the top line of the staff below.
  attribute spacing.staff { data.MEASUREMENT }?
att.scoreDef.vis.attribute.spacing.system =
  
  ## describes the space between adjacent systems; a pair of space-separated values (minimum and maximum, respectively) provides a range between which a rendering system-supplied value may fall, while a single value indicates a fixed amount of space; that is, the minimum and maximum values are equal.
  attribute spacing.system {
    list { data.MEASUREMENT }
  }?
att.scoreDef.vis.attribute.system.leftmar =
  
  ## describes the amount of whitespace at the left system margin relative to page.leftmar.
  attribute system.leftmar { data.MEASUREMENT }?
att.scoreDef.vis.attribute.system.rightmar =
  
  ## describes the amount of whitespace at the right system margin relative to page.rightmar.
  attribute system.rightmar { data.MEASUREMENT }?
att.scoreDef.vis.attribute.system.topmar =
  
  ## describes the distance from page's top edge to the first system; used for first page only.
  attribute system.topmar { data.MEASUREMENT }?
att.scoreDef.vis.attribute.vu.height =
  
  ## defines the height of a "virtual unit" (vu) in terms of real-world units. A single vu is half the distance between the vertical center point of a staff line and that of an adjacent staff line.
  attribute vu.height {
    xsd:token { pattern = "\d+(\.\d+)?(cm|mm|in|pt|pc)" }
  }?
att.section.anl.attributes = empty
att.section.ges.attributes = empty
att.section.log.attributes = empty
att.section.vis.attributes = att.section.vis.attribute.restart
att.section.vis.attribute.restart =
  
  ## indicates that staves begin again with this section.
  attribute restart { data.BOOLEAN }?
att.sequence.attributes = att.sequence.attribute.seq
att.sequence.attribute.seq =
  
  ## used to assign a sequence number related to the order in which the encoded features carrying this attribute are believed to have occurred.
  attribute seq { xsd:positiveInteger }?
att.slashcount.attributes = att.slashcount.attribute.slash
att.slashcount.attribute.slash =
  
  ## indicates the number of slashes present.
  attribute slash { data.SLASH }?
att.slurpresent.attributes = att.slurpresent.attribute.slur
att.slurpresent.attribute.slur =
  
  ## indicates that this element participates in a slur. If visual information about the slur needs to be recorded, then a <slur> element should be employed.
  attribute slur { data.SLURS }?
att.space.anl.attributes = empty
att.space.ges.attributes = att.duration.performed.attributes
att.space.log.attributes =
  att.augmentdots.attributes,
  att.event.attributes,
  att.duration.musical.attributes,
  att.fermatapresent.attributes,
  att.tupletpresent.attributes,
  att.space.log.cmn.attributes
att.space.vis.attributes = att.space.vis.attribute.compressable
att.space.vis.attribute.compressable =
  
  ## indicates whether a space is 'compressible', i.e., if it may be removed at the discretion of processing software.
  attribute compressable { data.BOOLEAN }?
att.staff.anl.attributes = empty
att.staff.ges.attributes = empty
att.staff.log.attributes =
  att.meterconformance.attributes, att.staff.log.attribute.def
att.staff.log.attribute.def =
  
  ## provides a mechanism for linking the staff to a staffDef element.
  attribute def { data.URI }?
att.staff.vis.attributes = att.visibility.attributes
att.staffDef.anl.attributes = empty
att.staffDef.ges.attributes = att.instrumentident.attributes
att.staffDef.log.attributes =
  att.cleffing.log.attributes,
  att.duration.default.attributes,
  att.keySigDefault.log.attributes,
  att.meterSigDefault.log.attributes,
  att.octavedefault.attributes,
  att.transposition.attributes,
  att.staffDef.log.cmn.attributes
att.staffDef.vis.attributes =
  att.cleffing.vis.attributes,
  att.distances.attributes,
  att.keySigDefault.vis.attributes,
  att.labels.addl.attributes,
  att.lyricstyle.attributes,
  att.meterSigDefault.vis.attributes,
  att.multinummeasures.attributes,
  att.onelinestaff.attributes,
  att.scalable.attributes,
  att.textstyle.attributes,
  att.visibility.attributes,
  att.staffDef.vis.cmn.attributes,
  att.staffDef.vis.attribute.grid.show,
  att.staffDef.vis.attribute.layerscheme,
  att.staffDef.vis.attribute.lines,
  att.staffDef.vis.attribute.lines.color,
  att.staffDef.vis.attribute.lines.visible,
  att.staffDef.vis.attribute.spacing
att.staffDef.vis.attribute.grid.show =
  
  ## determines whether to display guitar chord grids.
  attribute grid.show { data.BOOLEAN }?
att.staffDef.vis.attribute.layerscheme =
  
  ## indicates the number of layers and their stem directions.
  attribute layerscheme { data.LAYERSCHEME }?
att.staffDef.vis.attribute.lines =
  
  ## indicates the number of staff lines.
  attribute lines { xsd:positiveInteger }?
att.staffDef.vis.attribute.lines.color =
  
  ## captures the colors of the staff lines. The value is structured; that is, it should have the same number of space-separated RGB values as the number of lines indicated by the lines attribute. A line can be made invisible by assigning it the same RGB value as the background, usually white.
  attribute lines.color { data.COLORS }?
att.staffDef.vis.attribute.lines.visible =
  
  ## records whether all staff lines are visible.
  attribute lines.visible { data.BOOLEAN }?
att.staffDef.vis.attribute.spacing =
  
  ## records the absolute distance (as opposed to the relative distances recorded in <scoreDef> elements) between this staff and the preceding one in the same system. This value is meaningless for the first staff in a system since the spacing.system attribute indicates the spacing between systems.
  attribute spacing { data.MEASUREMENT }?
att.staffgroupingsym.attributes = att.staffgroupingsym.attribute.symbol
att.staffgroupingsym.attribute.symbol =
  
  ## specifies the symbol used to group a set of staves.
  attribute symbol {
    
    ## curved symbol, i.e., {.
    "brace"
    | 
      ## square symbol, i.e., [.
      "bracket"
    | 
      ## line symbol, i.e., |.
      "line"
    | 
      ## grouping symbol missing.
      "none"
  }?
att.staffGrp.anl.attributes = empty
att.staffGrp.ges.attributes = att.instrumentident.attributes
att.staffGrp.log.attributes = empty
att.staffGrp.vis.attributes =
  att.labels.addl.attributes,
  att.staffgroupingsym.attributes,
  att.visibility.attributes,
  att.staffGrp.vis.attribute.barthru
att.staffGrp.vis.attribute.barthru =
  
  ## indicates whether bar lines go across the space between staves (true) or are only drawn across the lines of each staff (false).
  attribute barthru { data.BOOLEAN }?
att.staffident.attributes = att.staffident.attribute.staff
att.staffident.attribute.staff =
  
  ## signifies the staff on which a notated event occurs or to which a control event applies. Mandatory when applicable.
  attribute staff {
    list { xsd:positiveInteger+ }
  }?
att.staffloc.attributes = att.staffloc.attribute.loc
att.staffloc.attribute.loc =
  
  ## holds the staff location of the feature.
  attribute loc { data.STAFFLOC }?
att.staffloc.pitched.attributes =
  att.staffloc.pitched.attribute.ploc,
  att.staffloc.pitched.attribute.oloc
att.staffloc.pitched.attribute.ploc =
  
  ## captures staff location in terms of written pitch name.
  attribute ploc { data.PITCHNAME }?
att.staffloc.pitched.attribute.oloc =
  
  ## records staff location in terms of written octave.
  attribute oloc { data.OCTAVE }?
att.startendid.attributes =
  att.startid.attributes, att.startendid.attribute.endid
att.startendid.attribute.endid =
  
  ## indicates the final element in a sequence of events to which the feature applies.
  attribute endid { data.URI }?
att.startid.attributes = att.startid.attribute.startid
att.startid.attribute.startid =
  
  ## holds a reference to the first element in a sequence of events to which the feature applies.
  attribute startid { data.URI }?
att.stemmed.attributes =
  att.stemmed.cmn.attributes,
  att.stemmed.attribute.stem.dir,
  att.stemmed.attribute.stem.len,
  att.stemmed.attribute.stem.pos,
  att.stemmed.attribute.stem.x,
  att.stemmed.attribute.stem.y
att.stemmed.attribute.stem.dir =
  
  ## describes the direction of a stem.
  attribute stem.dir { data.STEMDIRECTION }?
att.stemmed.attribute.stem.len =
  
  ## encodes the stem length.
  attribute stem.len { xsd:decimal }?
att.stemmed.attribute.stem.pos =
  
  ## records the position of the stem in relation to the note head(s).
  attribute stem.pos { data.STEMPOSITION }?
att.stemmed.attribute.stem.x =
  
  ## records the output x coordinate of the stem's attachment point.
  attribute stem.x { xsd:decimal }?
att.stemmed.attribute.stem.y =
  
  ## records the output y coordinate of the stem's attachment point.
  attribute stem.y { xsd:decimal }?
att.syltext.attributes = att.syltext.attribute.syl
att.syltext.attribute.syl =
  
  ## holds an associated sung text syllable.
  attribute syl { text }?
att.tempo.anl.attributes = empty
att.tempo.ges.attributes = att.mmtempo.attributes
att.tempo.log.attributes =
  att.controlevent.attributes, att.startid.attributes
att.tempo.vis.attributes =
  att.placement.attributes,
  att.visualoffset.attributes,
  att.visualoffset2.ho.attributes,
  att.visualoffset2.to.attributes,
  att.xy.attributes
att.textstyle.attributes =
  att.textstyle.attribute.text.fam,
  att.textstyle.attribute.text.name,
  att.textstyle.attribute.text.size,
  att.textstyle.attribute.text.style,
  att.textstyle.attribute.text.weight
att.textstyle.attribute.text.fam =
  
  ## provides a default value for the font family name of text (other than lyrics) when this information is not provided on the individual elements.
  attribute text.fam { data.FONTFAMILY }?
att.textstyle.attribute.text.name =
  
  ## provides a default value for the font name of text (other than lyrics) when this information is not provided on the individual elements.
  attribute text.name { data.FONTNAME }?
att.textstyle.attribute.text.size =
  
  ## provides a default value for the font size of text (other than lyrics) when this information is not provided on the individual elements.
  attribute text.size { data.FONTSIZE }?
att.textstyle.attribute.text.style =
  
  ## provides a default value for the font style of text (other than lyrics) when this information is not provided on the individual elements.
  attribute text.style { data.FONTSTYLE }?
att.textstyle.attribute.text.weight =
  
  ## provides a default value for the font weight for text (other than lyrics) when this information is not provided on the individual elements.
  attribute text.weight { data.FONTWEIGHT }?
att.tiepresent.attributes = att.tiepresent.attribute.tie
att.tiepresent.attribute.tie =
  
  ## indicates that this element participates in a tie. If visual information about the tie needs to be recorded, then a <tie> element should be employed.
  attribute tie { data.TIES }?
att.timestamp.musical.attributes =
  att.timestamp.musical.attribute.tstamp
att.timestamp.musical.attribute.tstamp =
  
  ## encodes the onset time in terms of musical time, i.e., beats[.fractional_beat_part].
  attribute tstamp { data.BEAT }?
att.timestamp.performed.attributes =
  att.timestamp.performed.attribute.tstamp.ges,
  att.timestamp.performed.attribute.tstamp.real
att.timestamp.performed.attribute.tstamp.ges =
  
  ## used to record the onset time in pulses per quarter note (ppq, MusicXML divisions, or MIDI clicks) since the start of the file.
  attribute tstamp.ges { xsd:nonNegativeInteger }?
att.timestamp.performed.attribute.tstamp.real =
  
  ## used to record the onset time in terms of ISO time since the start of the file.
  attribute tstamp.real { data.ISOTIME }?
att.timestamp2.musical.attributes =
  att.timestamp2.musical.attribute.tstamp2
att.timestamp2.musical.attribute.tstamp2 =
  
  ## encodes the ending point of an event in terms of musical time, i.e., a count of measures plus a beat location.
  attribute tstamp2 { data.MEASUREBEAT }?
att.transposition.attributes =
  att.transposition.attribute.trans.diat,
  att.transposition.attribute.trans.semi
att.transposition.attribute.trans.diat =
  
  ## records the amount of diatonic pitch shift, e.g., C to C♯ = 0, C to D♭ = 1, necessary to calculate the sounded pitch from the written one. 
  attribute trans.diat { xsd:decimal }?
att.transposition.attribute.trans.semi =
  
  ## records the amount of pitch shift in semitones, e.g., C to C♯ = 1, C to D♭ = 1, necessary to calculate the sounded pitch from the written one. 
  attribute trans.semi { xsd:decimal }?
att.tupletpresent.attributes = att.tupletpresent.attribute.tuplet
att.tupletpresent.attribute.tuplet =
  
  ## indicates that this feature participates in a tuplet. If visual information about the tuplet needs to be recorded, then a <tuplet> element should be employed.
  attribute tuplet { data.TUPLETS }?
att.typed.attributes =
  att.typed.attribute.type, att.typed.attribute.subtype
att.typed.attribute.type =
  
  ## characterizes the element in some sense, using any convenient classification scheme or typology.
  attribute type { xsd:NMTOKEN }?
att.typed.attribute.subtype =
  
  ## provide any sub-classification for the element, additional to that given by its type attribute.
  attribute subtype { xsd:NMTOKEN }?
sch:pattern [
  id = "wegaWorks-att.typed-subtype-When_subtype-constraint-4"
  "\x{a}" ~
  "    "
  sch:rule [
    context = "mei:*[@subtype]"
    "\x{a}" ~
    "      "
    sch:assert [
      test = "@type"
      "An element with a subtype attribute must have a type\x{a}" ~
      "                  attribute."
    ]
    "\x{a}" ~
    "    "
  ]
  "\x{a}" ~
  "  "
]
att.typography.attributes =
  att.typography.attribute.fontfam,
  att.typography.attribute.fontname,
  att.typography.attribute.fontsize,
  att.typography.attribute.fontstyle,
  att.typography.attribute.fontweight
att.typography.attribute.fontfam =
  
  ## contains the name of a font-family.
  attribute fontfam { data.FONTFAMILY }?
att.typography.attribute.fontname =
  
  ## holds the name of a font.
  attribute fontname { data.FONTNAME }?
att.typography.attribute.fontsize =
  
  ## indicates the size of a font in printers' points, i.e., 1/72nd of an inch.
  attribute fontsize { xsd:decimal }?
att.typography.attribute.fontstyle =
  
  ## records the style of a font, i.e, italic, oblique, or normal.
  attribute fontstyle { data.FONTSTYLE }?
att.typography.attribute.fontweight =
  
  ## used to indicate bold type.
  attribute fontweight { data.FONTWEIGHT }?
att.visibility.attributes = att.visibility.attribute.visible
att.visibility.attribute.visible =
  
  ## indicates if a feature should be rendered when the notation is presented graphically or sounded when it is presented in an aural form.
  attribute visible { data.BOOLEAN }?
att.visualoffset.attributes =
  att.visualoffset.ho.attributes,
  att.visualoffset.to.attributes,
  att.visualoffset.vo.attributes
att.visualoffset.ho.attributes = att.visualoffset.ho.attribute.ho
att.visualoffset.ho.attribute.ho =
  
  ## records a horizontal adjustment to a feature's programmatically-determined location in terms of staff interline distance; that is, in units of 1/2 the distance between adjacent staff lines.
  attribute ho { data.MEASUREMENT }?
att.visualoffset.to.attributes = att.visualoffset.to.attribute.to
att.visualoffset.to.attribute.to =
  
  ## records a timestamp adjustment of a feature's programmatically-determined location in terms of musical time; that is, beats.
  attribute to { data.TSTAMPOFFSET }?
att.visualoffset.vo.attributes = att.visualoffset.vo.attribute.vo
att.visualoffset.vo.attribute.vo =
  
  ## records the vertical adjustment of a feature's programmatically-determined location in terms of staff interline distance; that is, in units of 1/2 the distance between adjacent staff lines.
  attribute vo { data.MEASUREMENT }?
att.visualoffset2.attributes =
  att.visualoffset2.ho.attributes,
  att.visualoffset2.to.attributes,
  att.visualoffset2.vo.attributes
att.visualoffset2.ho.attributes =
  att.visualoffset2.ho.attribute.startho,
  att.visualoffset2.ho.attribute.endho
att.visualoffset2.ho.attribute.startho =
  
  ## records the horizontal adjustment of a feature's programmatically-determined start point.
  attribute startho { data.MEASUREMENT }?
att.visualoffset2.ho.attribute.endho =
  
  ## records the horizontal adjustment of a feature's programmatically-determined end point.
  attribute endho { data.MEASUREMENT }?
att.visualoffset2.to.attributes =
  att.visualoffset2.to.attribute.startto,
  att.visualoffset2.to.attribute.endto
att.visualoffset2.to.attribute.startto =
  
  ## records a timestamp adjustment of a feature's programmatically-determined start point.
  attribute startto { data.TSTAMPOFFSET }?
att.visualoffset2.to.attribute.endto =
  
  ## records a timestamp adjustment of a feature's programmatically-determined end point.
  attribute endto { data.TSTAMPOFFSET }?
att.visualoffset2.vo.attributes =
  att.visualoffset2.vo.attribute.startvo,
  att.visualoffset2.vo.attribute.endvo
att.visualoffset2.vo.attribute.startvo =
  
  ## records a vertical adjustment of a feature's programmatically-determined start point.
  attribute startvo { data.MEASUREMENT }?
att.visualoffset2.vo.attribute.endvo =
  
  ## records a vertical adjustment of a feature's programmatically-determined end point.
  attribute endvo { data.MEASUREMENT }?
att.whitespace.attributes = att.whitespace.attribute.xmlspace
att.whitespace.attribute.xmlspace =
  
  ## allows one to signal to an application whether an element's white space is "significant". The behavior of xml:space cascades to all descendant elements, but it can be turned off locally by setting the xml:space attribute to the value "default".
  attribute xml:space {
    
    ## allows the application to handle white space as necessary. Not including an xml:space attribute produces the same result as using the default value.
    "default"
    | 
      ## instructs the application to maintain white space "as-is", suggesting that it might have meaning.
      "preserve"
  }?
att.width.attributes = att.width.attribute.width
att.width.attribute.width =
  
  ## measurement of the horizontal dimension of an entity. The width attribute may be used to capture measure width data for interchange with music printing systems that utilize this information for printing. On <barLine> the width attribute captures the width of the preceding measure.
  attribute width { data.MEASUREMENT }?
att.xy.attributes = att.xy.attribute.x, att.xy.attribute.y
att.xy.attribute.x =
  
  ## encodes an x coordinate for a feature in an output coordinate system. When it is necessary to record the placement of a feature in a facsimile image, use the facs attribute.
  attribute x { xsd:decimal }?
att.xy.attribute.y =
  
  ## encodes an y coordinate for a feature in an output coordinate system. When it is necessary to record the placement of a feature in a facsimile image, use the facs attribute.
  attribute y { xsd:decimal }?
att.xy2.attributes = att.xy2.attribute.x2, att.xy2.attribute.y2
att.xy2.attribute.x2 =
  
  ## encodes the optional 2nd x coordinate.
  attribute x2 { xsd:decimal }?
att.xy2.attribute.y2 =
  
  ## encodes the optional 2nd y coordinate.
  attribute y2 { xsd:decimal }?
model.addressLike = address
model.addressLike_alternation = address
model.addressLike_sequence = address
model.addressLike_sequenceOptional = address?
model.addressLike_sequenceOptionalRepeatable = address*
model.addressLike_sequenceRepeatable = address+
model.annotLike = annot
model.annotLike_alternation = annot
model.annotLike_sequence = annot
model.annotLike_sequenceOptional = annot?
model.annotLike_sequenceOptionalRepeatable = annot*
model.annotLike_sequenceRepeatable = annot+
model.biblLike = bibl
model.biblLike_alternation = bibl
model.biblLike_sequence = bibl
model.biblLike_sequenceOptional = bibl?
model.biblLike_sequenceOptionalRepeatable = bibl*
model.biblLike_sequenceRepeatable = bibl+
model.controleventLike =
  dir | dynam | tempo | model.controleventLike.cmn
model.dateLike = date
model.dateLike_alternation = date
model.dateLike_sequence = date
model.dateLike_sequenceOptional = date?
model.dateLike_sequenceOptionalRepeatable = date*
model.dateLike_sequenceRepeatable = date+
model.editionLike = edition
model.editorialLike = notAllowed
model.editorialLike_alternation = notAllowed
model.editorialLike_sequence = empty
model.editorialLike_sequenceOptional = empty
model.editorialLike_sequenceOptionalRepeatable = empty
model.editorialLike_sequenceRepeatable = notAllowed
model.endingLike = notAllowed
model.eventLike =
  model.keySigLike
  | model.meterSigLike
  | chord
  | note
  | rest
  | space
  | model.eventLike.cmn
model.identifierLike = identifier
model.identifierLike_alternation = identifier
model.identifierLike_sequence = identifier
model.identifierLike_sequenceOptional = identifier?
model.identifierLike_sequenceOptionalRepeatable = identifier*
model.identifierLike_sequenceRepeatable = identifier+
model.incipLike = incip
model.instrDefLike = notAllowed
model.keySigLike = notAllowed
model.keySigLike_alternation = notAllowed
model.keySigLike_sequence = empty
model.keySigLike_sequenceOptional = empty
model.keySigLike_sequenceOptionalRepeatable = empty
model.keySigLike_sequenceRepeatable = notAllowed
model.labelLike = notAllowed
model.layerDefLike = notAllowed
model.layerLike = layer
model.layerPart =
  model.eventLike
  | model.layerPart.mensuralAndNeumes
  | model.layerPart.cmn
model.layerPart.mensuralAndNeumes =
  model.scoreDefLike | model.staffDefLike
model.lbLike = lb
model.lbLike_alternation = lb
model.lbLike_sequence = lb
model.lbLike_sequenceOptional = lb?
model.lbLike_sequenceOptionalRepeatable = lb*
model.lbLike_sequenceRepeatable = lb+
model.mdivLike = mdiv
model.measurementLike = model.numLike
model.measurementLike_alternation = model.numLike_alternation
model.measurementLike_sequence = model.numLike_sequence
model.measurementLike_sequenceOptional = model.numLike_sequenceOptional?
model.measurementLike_sequenceOptionalRepeatable =
  model.numLike_sequenceOptionalRepeatable*
model.measurementLike_sequenceRepeatable =
  model.numLike_sequenceRepeatable+
model.meterSigLike = notAllowed
model.meterSigLike_alternation = notAllowed
model.meterSigLike_sequence = empty
model.meterSigLike_sequenceOptional = empty
model.meterSigLike_sequenceOptionalRepeatable = empty
model.meterSigLike_sequenceRepeatable = notAllowed
model.milestoneLike.music = model.pbLike
model.milestoneLike.text = model.lbLike | model.pbLike
model.milestoneLike.text_alternation =
  model.lbLike_alternation | model.pbLike_alternation
model.milestoneLike.text_sequence =
  model.lbLike_sequence, model.pbLike_sequence
model.milestoneLike.text_sequenceOptional =
  model.lbLike_sequenceOptional?, model.pbLike_sequenceOptional?
model.milestoneLike.text_sequenceOptionalRepeatable =
  model.lbLike_sequenceOptionalRepeatable*,
  model.pbLike_sequenceOptionalRepeatable*
model.milestoneLike.text_sequenceRepeatable =
  model.lbLike_sequenceRepeatable+, model.pbLike_sequenceRepeatable+
model.nameLike = name
model.nameLike_alternation = name
model.nameLike_sequence = name
model.nameLike_sequenceOptional = name?
model.nameLike_sequenceOptionalRepeatable = name*
model.nameLike_sequenceRepeatable = name+
model.noteModifierLike = artic
model.numLike = notAllowed
model.numLike_alternation = notAllowed
model.numLike_sequence = empty
model.numLike_sequenceOptional = empty
model.numLike_sequenceOptionalRepeatable = empty
model.numLike_sequenceRepeatable = notAllowed
model.paracontentPart =
  model.textphraseLike | model.editLike | model.transcriptionLike
model.partsLike = notAllowed
model.pbLike = notAllowed
model.pbLike_alternation = notAllowed
model.pbLike_sequence = empty
model.pbLike_sequenceOptional = empty
model.pbLike_sequenceOptionalRepeatable = empty
model.pbLike_sequenceRepeatable = notAllowed
model.pLike = p
model.rendLike = rend
model.rendLike_alternation = rend
model.rendLike_sequence = rend
model.rendLike_sequenceOptional = rend?
model.rendLike_sequenceOptionalRepeatable = rend*
model.rendLike_sequenceRepeatable = rend+
model.repositoryLike = repository
model.repositoryLike_alternation = repository
model.repositoryLike_sequence = repository
model.repositoryLike_sequenceOptional = repository?
model.repositoryLike_sequenceOptionalRepeatable = repository*
model.repositoryLike_sequenceRepeatable = repository+
model.resourceLike = notAllowed
model.scoreDefLike = scoreDef
model.scoreDefLike_alternation = scoreDef
model.scoreDefLike_sequence = scoreDef
model.scoreDefLike_sequenceOptional = scoreDef?
model.scoreDefLike_sequenceOptionalRepeatable = scoreDef*
model.scoreDefLike_sequenceRepeatable = scoreDef+
model.scoreLike = score
model.scorePart =
  model.endingLike
  | model.scoreDefLike
  | model.scorePart.mensuralAndNeumes
  | model.sectionLike
  | model.staffDefLike
model.scorePart.mensuralAndNeumes = notAllowed
model.sectionLike = section
model.sectionPart =
  model.endingLike
  | model.scoreDefLike
  | model.sectionLike
  | model.sectionPart.mensuralAndNeumes
  | model.staffDefLike
  | model.sectionPart.cmn
model.sectionPart.mensuralAndNeumes = model.staffLike
model.staffDefLike = staffDef
model.staffDefLike_alternation = staffDef
model.staffDefLike_sequence = staffDef
model.staffDefLike_sequenceOptional = staffDef?
model.staffDefLike_sequenceOptionalRepeatable = staffDef*
model.staffDefLike_sequenceRepeatable = staffDef+
model.staffDefPart = model.keySigLike | model.meterSigLike
model.staffGrpLike = staffGrp
model.staffLike = staff
model.staffLike_alternation = staff
model.staffLike_sequence = staff
model.staffLike_sequenceOptional = staff?
model.staffLike_sequenceOptionalRepeatable = staff*
model.staffLike_sequenceRepeatable = staff+
model.staffPart =
  model.layerLike | model.staffPart.mensuralAndNeumes | model.ossiaLike
model.staffPart.mensuralAndNeumes =
  model.scoreDefLike | model.staffDefLike
model.textcomponentLike = model.pLike
model.textphraseLike =
  model.addressLike
  | model.annotLike
  | model.biblLike
  | model.dateLike
  | model.editorialLike
  | model.identifierLike
  | model.measurementLike
  | model.milestoneLike.text
  | model.nameLike
  | model.rendLike
  | model.titleLike
  | model.nameLike.agent
  | model.nameLike.label
  | model.nameLike.place
model.textphraseLike.limited =
  model.addressLike
  | model.biblLike
  | model.dateLike
  | model.editorialLike
  | model.identifierLike
  | model.lbLike
  | model.measurementLike
  | model.nameLike
  | model.rendLike
  | model.titleLike
  | model.nameLike.agent
  | model.nameLike.label
  | model.nameLike.place
model.titleLike = title
model.titleLike_alternation = title
model.titleLike_sequence = title
model.titleLike_sequenceOptional = title?
model.titleLike_sequenceOptionalRepeatable = title*
model.titleLike_sequenceRepeatable = title+
address =
  
  ## Contains a postal address, for example of a publisher, an organization, or an individual. 
  element address {
    addrLine+, att.common.attributes, att.lang.attributes, empty
  }
addrLine =
  
  ## (address line) – Single line of a postal address. 
  element addrLine {
    (text
     | model.textphraseLike
     | model.editLike
     | model.transcriptionLike)*,
    att.common.attributes,
    att.lang.attributes,
    empty
  }
annot =
  
  ## (annotation) – Provides a short statement explaining the text or indicating the basis for an assertion. 
  element annot {
    (text
     | model.textcomponentLike
     | model.textphraseLike
     | model.editLike
     | model.transcriptionLike)*,
    att.bibl.attributes,
    att.common.attributes,
    att.lang.attributes,
    att.typed.attributes,
    att.annot.log.attributes,
    att.annot.vis.attributes,
    att.annot.ges.attributes,
    att.annot.anl.attributes,
    att.plist.attributes,
    att.responsibility.attributes,
    empty
  }
artic =
  
  ## (articulation) – An indication of how to play a note or chord. 
  element artic {
    empty,
    att.common.attributes,
    att.typography.attributes,
    att.artic.log.attributes,
    att.artic.vis.attributes,
    att.artic.ges.attributes,
    att.artic.anl.attributes,
    empty
  }
bibl =
  
  ## (bibliographic reference) – Provides a loosely-structured bibliographic citation in which the sub-components may or may not be explicitly marked. 
  element bibl {
    identifier?,
    title?,
    persName?,
    pubPlace?,
    date?,
    annot?,
    att.common.attributes,
    att.lang.attributes,
    att.pointing.attributes,
    empty
  }
body =
  
  ## Contains the whole of a single musical text, excluding any front or back matter. 
  element body {
    model.mdivLike+,
    att.common.attributes,
    att.declaring.attributes,
    empty
  }
chord =
  
  ## A simultaneous sounding of two or more notes in the same layer *with the same duration*.
  element chord {
    (note | artic | model.editLike | model.transcriptionLike)*,
    att.common.attributes,
    att.chord.log.attributes,
    att.chord.vis.attributes,
    att.chord.ges.attributes,
    att.chord.anl.attributes,
    empty
  }
creation =
  
  ## Non-bibliographic details of the creation of an intellectual entity, in narrative form, such as the date, place, and circumstances of its composition. 
  element creation {
    (text | date | geogName)*,
    att.common.attributes,
    att.bibl.attributes,
    att.lang.attributes,
    empty
  }
date =
  
  ## A string identifying a point in time or the time period between two such points.
  element date {
    ((text | model.textphraseLike)*)
    >> sch:pattern [
         id = "wegaWorks-date-dateHeuristics1-constraint-1"
         "\x{a}" ~
         "        "
         sch:rule [
           context = "mei:date"
           "\x{a}" ~
           "          "
           sch:report [
             test =
               "(@notbefore gt @notafter) and not(starts-with(@notbefore, '-'))"
             "value of notBefore greater than notAfter"
           ]
           "\x{a}" ~
           "        "
         ]
         "\x{a}" ~
         "      "
       ]
    >> sch:pattern [
         id = "wegaWorks-date-dateHeuristics3-constraint-2"
         "\x{a}" ~
         "        "
         sch:rule [
           context = "mei:date"
           "\x{a}" ~
           "          "
           sch:report [
             test =
               "(@startdate or @enddate) and (@isodate or @notafter or @notbefore)"
             "cooccurence of date and duration attributes"
           ]
           "\x{a}" ~
           "        "
         ]
         "\x{a}" ~
         "      "
       ]
    >> sch:pattern [
         id = "wegaWorks-date-dateHeuristics4-constraint-3"
         "\x{a}" ~
         "        "
         sch:rule [
           context = "mei:date"
           "\x{a}" ~
           "          "
           sch:report [
             test = "@isodate and (@notafter or @notbefore)"
             "cooccurence of exact and uncertain date attributes"
           ]
           "\x{a}" ~
           "        "
         ]
         "\x{a}" ~
         "      "
       ]
    >> sch:pattern [
         id = "wegaWorks-date-dateHeuristics5-constraint-5"
         "\x{a}" ~
         "        "
         sch:rule [
           context = "mei:date"
           "\x{a}" ~
           "          "
           sch:assert [
             test =
               "@isodate or @notbefore or @notafter or @startdate or @enddate or @cert='unknown' or matches(., '0000|o\.J\.|unknown')"
             "mei:date benötigt ein Attribut @isodate, @notbefore\x{a}" ~
             "                                    o.ä."
           ]
           "\x{a}" ~
           "        "
         ]
         "\x{a}" ~
         "      "
       ],
    att.bibl.attributes,
    att.calendared.attributes,
    att.datable.attributes,
    att.edit.attributes,
    empty
  }
dir =
  
  ## (directive) – A text expression that is on the score (typically above, below, or between staves, but not on the staff) not encoded elsewhere in more specific elements, such as <tempo> or <dynam>. 
  element dir {
    ((text
      | model.textphraseLike.limited
      | model.editLike
      | model.transcriptionLike)*)
    >> sch:pattern [
         id =
           "wegaWorks-dir-Start-type_attributes_required_on_some_control_events-constraint-5"
         "\x{a}" ~
         "        "
         sch:rule [
           context = "mei:dir[not(ancestor::mei:syllable)]"
           "\x{a}" ~
           "          "
           sch:assert [
             test = "@startid or @tstamp or @tstamp.ges or @tstamp.real"
             " Must have one of\x{a}" ~
             "              the attributes: startid, tstamp, tstamp.ges or tstamp.real"
           ]
           "\x{a}" ~
           "        "
         ]
         "\x{a}" ~
         "      "
       ],
    att.common.attributes,
    att.lang.attributes,
    att.typed.attributes,
    att.dir.log.attributes,
    att.dir.vis.attributes,
    att.dir.ges.attributes,
    att.dir.anl.attributes,
    empty
  }
dynam =
  
  ## (dynamic) – Indication of the volume of a note, phrase, or section of music. 
  element dynam {
    ((text
      | model.textphraseLike.limited
      | model.editLike
      | model.transcriptionLike)*)
    >> sch:pattern [
         id =
           "wegaWorks-dynam-Start-type_attributes_required_on_some_control_events-constraint-6"
         "\x{a}" ~
         "        "
         sch:rule [
           context = "mei:dynam"
           "\x{a}" ~
           "          "
           sch:assert [
             test = "@startid or @tstamp or @tstamp.ges or @tstamp.real"
             " Must have one of\x{a}" ~
             "              the attributes: startid, tstamp, tstamp.ges or tstamp.real"
           ]
           "\x{a}" ~
           "        "
         ]
         "\x{a}" ~
         "      "
       ],
    att.common.attributes,
    att.lang.attributes,
    att.dynam.log.attributes,
    att.dynam.vis.attributes,
    att.dynam.ges.attributes,
    att.dynam.anl.attributes,
    empty
  }
edition =
  
  ## (edition designation) – A word or text phrase that indicates a difference in either content or form between the item being described and a related item previously issued by the same publisher/distributor (e.g. 2nd edition, version 2.0, etc.), or simultaneously issued by either the same publisher/distributor or another publisher/distributor (e.g. large print edition, British edition, etc.). 
  element edition {
    (text | model.textphraseLike.limited)*,
    att.common.attributes,
    att.bibl.attributes,
    empty
  }
extent =
  
  ## Used to express size in terms other than physical dimensions, such as number of pages, number of records in file, number of bytes, performance duration for music, audio recordings and visual projections, etc. 
  element extent {
    (text | model.textphraseLike.limited)*,
    att.common.attributes,
    att.bibl.attributes,
    att.measurement.attributes,
    empty
  }
group =
  
  ## Contains a composite musical text, grouping together a sequence of distinct musical texts (or groups of such musical texts) which are regarded as a unit for some purpose, for example, the collected works of a composer. 
  element group {
    (music | group),
    (music | group)*,
    att.common.attributes,
    att.declaring.attributes,
    empty
  }
identifier =
  
  ## An alpha-numeric string that establishes the identity of the described material. 
  element identifier {
    (text
     | model.textphraseLike
     | model.editLike
     | model.transcriptionLike)*,
    att.authorized.attributes,
    att.bibl.attributes,
    att.common.attributes,
    att.typed.attributes,
    empty
  }
incip =
  
  ## (incipit) – The opening music and/or words of a composition. 
  element incip {
    (incipCode | incipText | model.scoreLike)*,
    att.common.attributes,
    att.bibl.attributes,
    att.typed.attributes,
    empty
  }
layer =
  
  ## An independent stream of events on a staff. 
  element layer {
    ((model.milestoneLike.music
      | model.annotLike
      | model.editLike
      | model.transcriptionLike
      | model.layerPart)*)
    >> sch:pattern [
         id = "wegaWorks-layer-Check_layern-constraint-7"
         "\x{a}" ~
         "        "
         sch:rule [
           context = "mei:layer[@n]"
           "\x{a}" ~
           "          "
           sch:assert [
             test = "number(@n) = round(number(@n))"
             "The n attribute must be a single\x{a}" ~
             "              integer."
           ]
           "\x{a}" ~
           "        "
         ]
         "\x{a}" ~
         "      "
       ],
    att.common.attributes,
    att.declaring.attributes,
    att.layer.log.attributes,
    att.layer.vis.attributes,
    att.layer.ges.attributes,
    att.layer.anl.attributes,
    empty
  }
lb =
  
  ## (line break) – An empty formatting element that forces text to begin on a new line. 
  element lb {
    empty,
    att.common.attributes,
    att.typed.attributes,
    
    ## states whether the line break follows a single line or a line group.
    attribute func {
      
      ##
      "line"
      | 
        ##
        "group"
    }?,
    empty
  }
mdiv =
  
  ## (musical division) – contains a subdivision of the body of a musical text. 
  element mdiv {
    ((model.scoreLike?, model.partsLike?) | model.mdivLike*),
    att.common.attributes,
    att.declaring.attributes,
    att.typed.attributes,
    empty
  }
mei =
  
  ## enthält ein einzelenes MEI-konformes Dokument, dass aus einem MEI header und muskialischem Text, entweder alleinstehend oder als Teil eines meiCorpus Elements, besteht.
  element mei {
    meiHead,
    music
    >> sch:ns [
         prefix = "mei"
         uri = "http://www.music-encoding.org/ns/mei"
       ]
    >> sch:pattern [
         id = "wegaWorks-mei-Check_staff-constraint-8"
         "\x{a}" ~
         "        "
         sch:rule [
           context = "mei:*[@staff]"
           "\x{a}" ~
           "          "
           sch:assert [
             test =
               "every $i in tokenize(@staff, '\s+') satisfies               $i=//mei:staffDef/@n"
             "The values in @staff must correspond to @n attribute of a\x{a}" ~
             "              staffDef element."
           ]
           "\x{a}" ~
           "        "
         ]
         "\x{a}" ~
         "      "
       ],
    att.meiversion.attributes,
    
    ## (Bezeichner) lieferte jegliche Form eines Bezeichners in einer standardisierten Form, der benutzt werden kann um Objekte zu identifiziert, wie etwa ein bibliographisches Element, eine Organisation, usw.
    attribute xml:id { key.work.pattern },
    empty
  }
music =
  
  ## Contains a single musical text of any kind, whether unitary or composite, for example, an etude, opera, song cycle, symphony, or anthology of piano solos.
  element music {
    model.resourceLike*,
    macro.musicPart,
    att.common.attributes,
    att.declaring.attributes,
    att.meiversion.attributes,
    empty
  }
name =
  
  ## Proper noun or noun phrase. 
  element name {
    (text
     | model.textphraseLike
     | model.editLike
     | model.transcriptionLike)*,
    att.bibl.attributes,
    att.common.attributes,
    att.lang.attributes,
    att.name.attributes,
    att.typed.attributes,
    empty
  }
note =
  
  ## A single pitched event. 
  element note {
    (model.noteModifierLike
     | model.verseLike
     | model.sylLike
     | model.editLike
     | model.transcriptionLike)*,
    att.common.attributes,
    att.note.log.attributes,
    att.note.vis.attributes,
    att.note.ges.attributes,
    att.note.anl.attributes,
    empty
  }
p =
  
  ## (paragraph) – One or more text phrases that form a logical prose passage. 
  element p {
    (text | model.paracontentPart)*,
    att.common.attributes,
    att.declaring.attributes,
    att.lang.attributes,
    att.xy.attributes,
    empty
  }
physLoc =
  
  ## (physical location) – Groups information about the physical location of a bibliographic item, such as the repository in which it is located and its shelf mark.
  element physLoc {
    model.repositoryLike?,
    model.identifierLike*,
    att.common.attributes,
    att.bibl.attributes,
    empty
  }
publisher =
  
  ## Name of the organization responsible for the publication of a bibliographic item.
  element publisher {
    (text | model.textphraseLike.limited)*,
    att.common.attributes,
    att.bibl.attributes,
    empty
  }
pubPlace =
  
  ## (publication place) – Name of the place where a bibliographic item was published.
  element pubPlace {
    (text | model.textphraseLike.limited)*,
    att.common.attributes,
    att.bibl.attributes,
    empty
  }
rend =
  
  ## (render) – A formatting element indicating special visual rendering, e.g., bold or italicized, of a text word or phrase. 
  element rend {
    (text
     | model.textphraseLike
     | model.editLike
     | model.transcriptionLike)*,
    att.wega.rend.attribute.n,
    att.wega.rend.attribute.rend,
    empty
  }
repository =
  
  ## Institution, agency, or individual which holds a bibliographic item. 
  element repository {
    (text | model.textphraseLike.limited)*,
    att.bibl.attributes,
    att.common.attributes,
    att.lang.attributes,
    att.name.attributes,
    att.typed.attributes,
    empty
  }
respStmt =
  
  ## (responsibility statement) – Names one or more individuals, groups, or in rare cases, mechanical processes, responsible for creation or realization of the intellectual or artistic content. 
  element respStmt {
    (model.nameLike | model.nameLike.agent)*,
    att.common.attributes,
    att.bibl.attributes,
    empty
  }
rest =
  
  ## A non-sounding event found in the source being transcribed. 
  element rest {
    empty
    >> sch:pattern [
         id = "wegaWorks-rest-Check_restline-constraint-9"
         "\x{a}" ~
         "        "
         sch:rule [
           context = "mei:rest[@line]"
           "\x{a}" ~
           "          "
           sch:let [
             name = "thisstaff"
             value = "ancestor::mei:staff/@n"
           ]
           "\x{a}" ~
           "          "
           sch:assert [
             test =
               "number(@line) <=               number(preceding::mei:staffDef[@n=$thisstaff and @lines][1]/@lines)"
             "The value of\x{a}" ~
             "              @line must be less than or equal to the number of lines on the staff."
           ]
           "\x{a}" ~
           "        "
         ]
         "\x{a}" ~
         "      "
       ],
    att.common.attributes,
    att.rest.log.attributes,
    att.rest.vis.attributes,
    att.rest.ges.attributes,
    att.rest.anl.attributes,
    empty
  }
score =
  
  ## Full score view of the musical content. 
  element score {
    (model.milestoneLike.music
     | model.annotLike
     | model.editLike
     | model.transcriptionLike
     | model.scorePart)*,
    att.common.attributes,
    att.declaring.attributes,
    att.typed.attributes,
    att.score.log.attributes,
    att.score.vis.attributes,
    att.score.ges.attributes,
    att.score.anl.attributes,
    empty
  }
scoreDef =
  
  ## (score definition) – Container for score meta-information.
  element scoreDef {
    model.keySigLike?,
    model.meterSigLike?,
    model.staffGrpLike?,
    att.common.attributes,
    att.scoreDef.log.attributes,
    att.scoreDef.vis.attributes,
    att.scoreDef.ges.attributes,
    att.scoreDef.anl.attributes,
    empty
  }
section =
  
  ## Segment of music data. 
  element section {
    ((model.milestoneLike.music
      | model.annotLike
      | model.editLike
      | model.transcriptionLike
      | model.sectionPart)*)
    >> sch:pattern [
         id = "wegaWorks-section-Check_sectionexpansion-constraint-10"
         "\x{a}" ~
         "        "
         sch:rule [
           context = "mei:section[mei:expansion]"
           "\x{a}" ~
           "          "
           sch:assert [
             test =
               "descendant::mei:section|descendant::mei:ending|descendant::mei:rdg"
             "Must have descendant section, ending, or rdg elements that can be pointed\x{a}" ~
             "              to."
           ]
           "\x{a}" ~
           "        "
         ]
         "\x{a}" ~
         "      "
       ],
    att.common.attributes,
    att.declaring.attributes,
    att.typed.attributes,
    att.pointing.attributes,
    att.section.log.attributes,
    att.section.vis.attributes,
    att.section.ges.attributes,
    att.section.anl.attributes,
    empty
  }
space =
  
  ## A placeholder used to fill an incomplete measure, layer, etc. most often so that the combined duration of the events equals the number of beats in the measure.
  element space {
    empty,
    att.common.attributes,
    att.space.log.attributes,
    att.space.vis.attributes,
    att.space.ges.attributes,
    att.space.anl.attributes,
    empty
  }
staff =
  
  ## A group of equidistant horizontal lines on which notes are placed in order to represent pitch or a grouping element for individual 'strands' of notes, rests, etc. that may or may not actually be rendered on staff lines; that is, both diastematic and non-diastematic signs. 
  element staff {
    ((model.milestoneLike.music
      | model.annotLike
      | model.editLike
      | model.transcriptionLike
      | model.staffPart)*)
    >> sch:pattern [
         id = "wegaWorks-staff-Check_staffn-constraint-11"
         "\x{a}" ~
         "        "
         sch:rule [
           context = "mei:staff[@n]"
           "\x{a}" ~
           "          "
           sch:assert [
             test = "number(@n) = round(number(@n))"
             "The n attribute must be a single\x{a}" ~
             "              integer."
           ]
           "\x{a}" ~
           "        "
         ]
         "\x{a}" ~
         "      "
       ],
    att.common.attributes,
    att.declaring.attributes,
    att.staff.log.attributes,
    att.staff.vis.attributes,
    att.staff.ges.attributes,
    att.staff.anl.attributes,
    empty
  }
staffDef =
  
  ## (staff definition) – Container for staff meta-information.
  element staffDef {
    model.labelLike*,
    ((model.instrDefLike | model.layerDefLike | model.staffDefPart)*)
    >> sch:pattern [
         id = "wegaWorks-staffDef-Check_staffDefn-constraint-12"
         "\x{a}" ~
         "        "
         sch:rule [
           context = "mei:staffDef"
           "\x{a}" ~
           "          "
           sch:let [ name = "thisstaff" value = "@n" ]
           "\x{a}" ~
           "          "
           sch:assert [
             test = "@n"
             "A staffDef must have an n attribute."
           ]
           "\x{a}" ~
           "          "
           sch:assert [
             test =
               "@lines or preceding::mei:staffDef[@n=$thisstaff and @lines]"
             "The first\x{a}" ~
             "              occurrence of a staff must declare the number of staff lines."
           ]
           "\x{a}" ~
           "          "
           sch:assert [
             test = "count(mei:clef) + count(mei:clefGrp) < 2"
             "Only one clef or clefGrp\x{a}" ~
             "              is permitted."
           ]
           "\x{a}" ~
           "        "
         ]
         "\x{a}" ~
         "      "
       ]
    >> sch:pattern [
         id = "wegaWorks-staffDef-Check_ancestor_staff-constraint-13"
         "\x{a}" ~
         "        "
         sch:rule [
           context = "mei:staffDef[ancestor::mei:staff]"
           "\x{a}" ~
           "          "
           sch:let [ name = "thisstaff" value = "@n" ]
           "\x{a}" ~
           "          "
           sch:assert [
             test = "ancestor::mei:staff/@n eq $thisstaff"
             "If a staffDef appears in a\x{a}" ~
             "              staff, it must bear the same @n than this staff."
           ]
           "\x{a}" ~
           "        "
         ]
         "\x{a}" ~
         "      "
       ]
    >> sch:pattern [
         id =
           "wegaWorks-staffDef-Check_clef_position_staffDef-constraint-14"
         "\x{a}" ~
         "        "
         sch:rule [
           context = "mei:staffDef[@clef.line and @lines]"
           "\x{a}" ~
           "          "
           sch:assert [
             test = "number(@clef.line) <= number(@lines)"
             "The clef position must be\x{a}" ~
             "              less than or equal to the number of lines on the staff."
           ]
           "\x{a}" ~
           "        "
         ]
         "\x{a}" ~
         "      "
       ]
    >> sch:pattern [
         id =
           "wegaWorks-staffDef-Check_clef_position_staffDef_nolines-constraint-15"
         "\x{a}" ~
         "        "
         sch:rule [
           context = "mei:staffDef[@clef.line and not(@lines)]"
           "\x{a}" ~
           "          "
           sch:let [ name = "thisstaff" value = "@n" ]
           "\x{a}" ~
           "          "
           sch:let [
             name = "stafflines"
             value =
               "preceding::mei:staffDef[@n=$thisstaff and               @lines][1]/@lines"
           ]
           "\x{a}" ~
           "          "
           sch:assert [
             test = "number(@clef.line) <= number($stafflines)"
             "The clef position must\x{a}" ~
             "              be less than or equal to the number of lines on the staff."
           ]
           "\x{a}" ~
           "        "
         ]
         "\x{a}" ~
         "      "
       ]
    >> sch:pattern [
         id = "wegaWorks-staffDef-Check_tab_strings-constraint-16"
         "\x{a}" ~
         "        "
         sch:rule [
           context = "mei:staffDef[@tab.strings and @lines]"
           "\x{a}" ~
           "          "
           sch:let [
             name = "countTokens"
             value =
               "count(tokenize(normalize-space(@tab.strings),               '\s'))"
           ]
           "\x{a}" ~
           "          "
           sch:assert [
             test = "$countTokens = 1 or $countTokens = @lines"
             "The tab.strings attribute\x{a}" ~
             "              must have the same number of values as there are staff lines."
           ]
           "\x{a}" ~
           "        "
         ]
         "\x{a}" ~
         "      "
       ]
    >> sch:pattern [
         id = "wegaWorks-staffDef-Check_tab_strings-constraint-17"
         "\x{a}" ~
         "        "
         sch:rule [
           context = "mei:staffDef[@tab.strings and not(@lines)]"
           "\x{a}" ~
           "          "
           sch:let [
             name = "countTokens"
             value =
               "count(tokenize(normalize-space(@tab.strings),               '\s'))"
           ]
           "\x{a}" ~
           "          "
           sch:let [ name = "thisStaff" value = "@n" ]
           "\x{a}" ~
           "          "
           sch:assert [
             test =
               "$countTokens = 1 or $countTokens =               preceding::mei:staffDef[@n=$thisStaff and @lines][1]/@lines"
             "The tab.strings attribute\x{a}" ~
             "              must have the same number of values as there are staff lines."
           ]
           "\x{a}" ~
           "        "
         ]
         "\x{a}" ~
         "      "
       ]
    >> sch:pattern [
         "\x{a}" ~
         "        "
         sch:rule [
           context = "mei:staffDef[@lines.color and @lines]"
           "\x{a}" ~
           "          "
           sch:let [
             name = "countTokens"
             value =
               "count(tokenize(normalize-space(@lines.color),                 '\s'))"
           ]
           "\x{a}" ~
           "          "
           sch:assert [
             test = "$countTokens = 1 or $countTokens = @lines"
             "The lines.color attribute\x{a}" ~
             "                must have either 1) a single value or 2) the same number of values as there are\x{a}" ~
             "                staff lines."
           ]
           "\x{a}" ~
           "        "
         ]
         "\x{a}" ~
         "        "
         sch:rule [
           context = "mei:staffDef[@lines.color and not(@lines)]"
           "\x{a}" ~
           "          "
           sch:let [
             name = "countTokens"
             value =
               "count(tokenize(normalize-space(@lines.color),                 '\s'))"
           ]
           "\x{a}" ~
           "          "
           sch:let [ name = "thisStaff" value = "@n" ]
           "\x{a}" ~
           "          "
           sch:assert [
             test =
               "$countTokens = 1 or $countTokens =                 preceding::mei:staffDef[@n=$thisStaff and @lines][1]/@lines"
             "The lines.color\x{a}" ~
             "                attribute must have either 1) a single value or 2) the same number of values as\x{a}" ~
             "                there are staff lines."
           ]
           "\x{a}" ~
           "        "
         ]
         "\x{a}" ~
         "      "
       ]
    >> sch:pattern [
         "\x{a}" ~
         "        "
         sch:rule [
           context = "mei:staffDef[@ppq][ancestor::mei:scoreDef[@ppq]]"
           "\x{a}" ~
           "          "
           sch:let [ name = "staffPPQ" value = "@ppq" ]
           "\x{a}" ~
           "          "
           sch:let [
             name = "scorePPQ"
             value = "ancestor::mei:scoreDef[@ppq][1]/@ppq"
           ]
           "\x{a}" ~
           "          "
           sch:assert [
             test = "($scorePPQ mod $staffPPQ) = 0"
             "The value of ppq must be a factor of\x{a}" ~
             "                the value of ppq on an ancestor scoreDef."
           ]
           "\x{a}" ~
           "        "
         ]
         "\x{a}" ~
         "      "
       ]
    >> sch:pattern [
         "\x{a}" ~
         "        "
         sch:rule [
           context = "mei:staffDef[@ppq][preceding::mei:scoreDef[@ppq]]"
           "\x{a}" ~
           "          "
           sch:let [ name = "staffPPQ" value = "@ppq" ]
           "\x{a}" ~
           "          "
           sch:let [
             name = "scorePPQ"
             value = "preceding::mei:scoreDef[@ppq][1]/@ppq"
           ]
           "\x{a}" ~
           "          "
           sch:assert [
             test = "($scorePPQ mod $staffPPQ) = 0"
             "The value of ppq must be a factor of\x{a}" ~
             "                the value of ppq on a preceding scoreDef."
           ]
           "\x{a}" ~
           "        "
         ]
         "\x{a}" ~
         "      "
       ],
    att.common.attributes,
    att.declaring.attributes,
    att.staffDef.log.attributes,
    att.staffDef.vis.attributes,
    att.staffDef.ges.attributes,
    att.staffDef.anl.attributes,
    empty
  }
staffGrp =
  
  ## (staff group) – A group of bracketed or braced staves. 
  element staffGrp {
    model.labelLike*,
    model.instrDefLike*,
    ((model.staffGrpLike | model.staffDefLike)+)
    >> sch:pattern [
         id =
           "wegaWorks-staffGrp-Check_staffGrp_unique_staff_n_values-constraint-22"
         "\x{a}" ~
         "        "
         sch:rule [
           context = "mei:staffGrp"
           "\x{a}" ~
           "          "
           sch:let [
             name = "countstaves"
             value = "count(descendant::mei:staffDef)"
           ]
           "\x{a}" ~
           "          "
           sch:let [
             name = "countuniqstaves"
             value =
               "count(distinct-values(descendant::mei:staffDef/@n))"
           ]
           "\x{a}" ~
           "          "
           sch:assert [
             test = "$countstaves eq $countuniqstaves"
             "Each staffDef must have a unique\x{a}" ~
             "              value for the n attribute."
           ]
           "\x{a}" ~
           "        "
         ]
         "\x{a}" ~
         "      "
       ],
    att.common.attributes,
    att.declaring.attributes,
    att.staffGrp.log.attributes,
    att.staffGrp.vis.attributes,
    att.staffGrp.ges.attributes,
    att.staffGrp.anl.attributes,
    empty
  }
tempo =
  
  ## Text and symbols descriptive of tempo, mood, or style, e.g., "allarg.", "a tempo", "cantabile", "Moderato", "♩=60", "Moderato ♩ =60").
  element tempo {
    ((text
      | model.textphraseLike.limited
      | model.editLike
      | model.transcriptionLike)*)
    >> sch:pattern [
         id =
           "wegaWorks-tempo-tempo_in_header_disallow_most_attrs-constraint-23"
         "\x{a}" ~
         "        "
         sch:rule [
           context = "mei:tempo[ancestor::mei:meiHead]"
           "\x{a}" ~
           "          "
           sch:assert [
             test =
               "not(@*[name() != 'label' and name() != 'n' and name() !=               'xml:base' and name() != 'xml:id' and name() != 'xml:lang'])"
             "Only label, n, xml:base,\x{a}" ~
             "              xml:id, and xml:lang attributes allowed when this element occurs in the\x{a}" ~
             "              header."
           ]
           "\x{a}" ~
           "        "
         ]
         "\x{a}" ~
         "      "
       ]
    >> sch:pattern [
         id =
           "wegaWorks-tempo-Start-type_attributes_required_on_some_control_events-constraint-24"
         "\x{a}" ~
         "        "
         sch:rule [
           context =
             "mei:tempo[not(ancestor::mei:syllable) and not(ancestor::mei:meiHead)]"
           "\x{a}" ~
           "          "
           sch:assert [
             test = "@startid or @tstamp or @tstamp.ges or @tstamp.real"
             " Must have one of\x{a}" ~
             "              the attributes: startid, tstamp, tstamp.ges or tstamp.real"
           ]
           "\x{a}" ~
           "        "
         ]
         "\x{a}" ~
         "      "
       ],
    att.common.attributes,
    att.lang.attributes,
    att.tempo.log.attributes,
    att.tempo.vis.attributes,
    att.tempo.ges.attributes,
    att.tempo.anl.attributes,
    empty
  }
title =
  
  ## Title of a bibliographic entity. 
  element title {
    (text | lb | persName | name)+,
    att.edit.attributes,
    att.common.attribute.n,
    att.id.attribute.xmlid,
    att.bibl.attributes,
    att.lang.attributes,
    att.typed.attribute.subtype,
    
    ## characterizes the element in some sense, using any convenient classification scheme or typology.
    attribute type {
      
      ## Markiert einen Untertitel.
      "sub"
      | 
        ## (alternativ) Markiert einen alternativen Titel, meist in Übersetzung (siehe xml:lang).
        "alt"
      | 
        ## (Nummer) Markiert einen Titel einer musikalischen Nummer (z.B. Szene, Arie).
        "div"
      | 
        ## (Einheitssachtitel) 
        "uniform"
    }?,
    
    ## indicates the bibliographic level for a title.
    attribute level {
      
      ## article.
      "a"
      | 
        ## monograph.
        "m"
      | 
        ## journal.
        "j"
      | 
        ## series.
        "s"
      | 
        ## unpublished (including theses and dissertations unless published by a commercial press).
        "u"
    }?,
    empty
  }
titlePage =
  
  ## Contains a transcription of the title page of a text. 
  element titlePage {
    (model.textcomponentLike | model.milestoneLike.text)+,
    att.common.attributes,
    att.lang.attributes,
    empty
  }
model.eventPart =
  model.addressLike
  | model.dateLike
  | model.nameLike
  | model.nameLike.agent
  | model.nameLike.geogName
model.frontPart = titlePage
model.headerPart_sequenceOptional = workDesc?
model.physDescPart =
  extent
  | model.frontPart
  | condition
  | dimensions
  | handList
  | inscription
  | physMedium
  | plateNum
  | provenance
  | watermark
model.pubStmtPart =
  model.addressLike
  | model.dateLike
  | model.identifierLike
  | publisher
  | pubPlace
  | respStmt
  | availability
model.workIdent = model.incipLike | tempo
model.workLike = work
altId =
  
  ## (alternative identifier) – May contain a bibliographic identifier that does not fit within the meiHead element's id attribute, for example because the id does not fit the definition of an XML id or because multiple identifiers are needed. 
  element altId {
    text,
    att.common.attribute.label,
    att.common.attribute.n,
    att.id.attribute.xmlid,
    att.typed.attribute.subtype,
    
    ## characterizes the element in some sense, using any convenient classification scheme or typology.
    ## Empfohlene Werte sind: 1] gnd(Gemeinsame
    ##                                             Normdatei) ; 2] opus; 3] WeGA(Werke) 
    attribute type {
      
      ## (Gemeinsame
      ##                                             Normdatei) Markiert Angaben (ID sowie Einheitssachtitel) nach der Gemeinsamen Normdatei.
      "gnd"
      | 
        ## Markiert eine Opuszahl.
        "opus"
      | 
        ## (Werke) Markiert eine ID aus der WeGA
        "WeGA"
      | xsd:NMTOKEN
    },
    empty
  }
availability =
  
  ## Groups elements that describe the availability of and access to a bibliographic item, including an MEI-encoded document. 
  element availability {
    model.availabilityPart+,
    att.bibl.attributes,
    att.common.attributes,
    att.datapointing.attributes,
    empty
  }
change =
  
  ## Individual change within the revision description. 
  element change {
    respStmt?,
    changeDesc,
    (model.dateLike?)
    >> sch:pattern [
         id = "wegaWorks-change-change_requirements-constraint-25"
         "\x{a}" ~
         "        "
         sch:rule [
           context = "mei:change"
           "\x{a}" ~
           "          "
           sch:assert [
             test = "@isodate or mei:date"
             "The date of the change must be recorded in an\x{a}" ~
             "              isodate attribute or date element."
           ]
           "\x{a}" ~
           "          "
           sch:assert [
             test = "@resp or mei:respStmt"
             "The person responsible for the change must be\x{a}" ~
             "              recorded in a resp attribute or respStmt element."
           ]
           "\x{a}" ~
           "        "
         ]
         "\x{a}" ~
         "      "
       ],
    att.common.attributes,
    att.bibl.attributes,
    att.datable.attributes,
    att.responsibility.attributes,
    empty
  }
changeDesc =
  
  ## (change description) – Description of a revision of the MEI file.
  element changeDesc {
    model.pLike+,
    att.common.attributes,
    att.bibl.attributes,
    att.lang.attributes,
    empty
  }
classCode =
  
  ## (classification code) – Holds a citation to the source of controlled-vocabulary terms used in the <termList> element; for example, Library of Congress Subject Headings (LCSH), Library of Congress Classification (LCC), Library of Congress Name Authority File (LCNAF), or other thesaurus or ontology. 
  element classCode {
    (text | model.lbLike | model.rendLike)*,
    att.common.attributes,
    att.authorized.attributes,
    att.bibl.attributes,
    empty
  }
classification =
  
  ## Groups information which describes the nature or topic of an entity. 
  element classification {
    (classCode | termList)+,
    att.common.attributes,
    att.bibl.attributes,
    att.datapointing.attributes,
    empty
  }
condition =
  
  ## The physical condition of an item, particularly any variances between the physical makeup of the item and that of other copies of the same item (e.g., missing pages, plates, etc.). 
  element condition {
    (text | model.textphraseLike.limited)*,
    att.common.attributes,
    att.bibl.attributes,
    att.lang.attributes,
    empty
  }
contentItem =
  
  ## Contains a single entry within a content description element.
  element contentItem {
    text*, att.bibl.attributes, att.common.attributes, empty
  }
contents =
  
  ## Description of the material contained within a resource.
  element contents {
    (model.pLike? | (model.labelLike?, contentItem)+),
    att.common.attributes,
    att.bibl.attributes,
    att.pointing.attributes,
    empty
  }
dimensions =
  
  ## Information about the physical size of a bibliographic source; usually includes numerical data. 
  element dimensions {
    (text | model.textphraseLike.limited)*,
    att.common.attributes,
    att.bibl.attributes,
    att.measurement.attributes,
    empty
  }
editionStmt =
  
  ## (edition statement) – Container for meta-data pertaining to a particular edition of the material being described. 
  element editionStmt {
    (model.editionLike, respStmt*)+,
    att.common.attributes,
    att.bibl.attributes,
    att.lang.attributes,
    empty
  }
event =
  
  ## Contains a description of an event, including the dates and locations of its occurrence and prominent participants.
  element event {
    (model.eventPart | model.pLike)*,
    att.bibl.attributes,
    att.calendared.attributes,
    att.common.attributes,
    att.edit.attributes,
    att.lang.attributes,
    empty
  }
eventList =
  
  ## Contains historical information given as a sequence of significant past events. 
  element eventList {
    event+,
    att.bibl.attributes,
    att.common.attributes,
    att.typed.attributes,
    empty
  }
fileDesc =
  
  ## (file description) – Contains a full bibliographic description of the MEI file. 
  element fileDesc {
    titleStmt,
    editionStmt?,
    extent?,
    pubStmt,
    seriesStmt?,
    notesStmt?,
    att.bibl.attributes,
    att.common.attributes,
    empty
  }
hand =
  
  ## Defines a distinct scribe or handwriting style. 
  element hand {
    (text | model.textphraseLike.limited)*,
    att.common.attributes,
    att.bibl.attributes,
    att.lang.attributes,
    att.medium.attributes,
    att.responsibility.attributes,
    
    ## marks this hand as the first one of the document.
    attribute initial { data.BOOLEAN }?,
    empty
  }
handList =
  
  ## Container for one or more hand elements. 
  element handList {
    hand+, att.common.attributes, att.bibl.attributes, empty
  }
history =
  
  ## Provides a container for information about the creation and history of a resource.
  element history {
    creation?,
    (eventList | p)*,
    att.common.attributes,
    att.bibl.attributes,
    empty
  }
incipCode =
  
  ## Incipit coded in a non-XML, plain text format, such as Plaine & Easie Code.
  element incipCode {
    text
    >> sch:pattern [
         id =
           "wegaWorks-incipCode-Check_incipCode_form_mimetype-constraint-26"
         "\x{a}" ~
         "        "
         sch:rule [
           context = "mei:incipCode"
           "\x{a}" ~
           "          "
           sch:assert [
             test = "@form or @mimetype"
             "incipCode must have a form or mimetype\x{a}" ~
             "              attribute."
           ]
           "\x{a}" ~
           "        "
         ]
         "\x{a}" ~
         "      "
       ],
    att.common.attributes,
    att.bibl.attributes,
    att.internetmedia.attributes,
    att.pointing.attributes,
    att.whitespace.attributes,
    
    ## form of the encoded incipit.
    ## Empfohlene Werte sind: 1] plaineAndEasie; 2] humdrumKern; 3] parsons
    attribute form {
      
      ## Plaine & Easie Code.
      "plaineAndEasie"
      | 
        ## Humdrum Kern format.
        "humdrumKern"
      | 
        ## Parsons code.
        "parsons"
      | xsd:Name
    }?,
    empty
  }
incipText =
  
  ## Opening words of a musical composition.
  element incipText {
    (model.pLike)*,
    att.common.attributes,
    att.bibl.attributes,
    att.lang.attributes,
    att.pointing.attributes,
    att.internetmedia.attributes,
    empty
  }
inscription =
  
  ## An inscription added to an item, such as a bookplate, a note designating the item as a gift, and/or the author's signature.
  element inscription {
    (text
     | model.textphraseLike.limited
     | model.editLike
     | model.transcriptionLike)*,
    att.common.attributes,
    att.bibl.attributes,
    att.lang.attributes,
    empty
  }
instrumentation =
  
  ## Instrumental and non-dramatic vocal resources.
  element instrumentation {
    (instrVoice | instrVoiceGrp)*,
    att.common.attributes,
    att.bibl.attributes,
    att.authorized.attributes,
    empty
  }
instrVoice =
  
  ## (instrument or voice) – Name of an instrument on which a performer plays or a performer's voice range.
  element instrVoice {
    (text | instrVoice)*,
    att.common.attributes,
    att.authorized.attributes,
    att.bibl.attributes,
    att.coded.attributes,
    
    ## indicates the number of performers.
    attribute count { xsd:positiveInteger }?,
    
    ## marks this instrument or vocal part as a soloist. Do not use this attribute for a solo instrument which is not accompanied.
    attribute solo { data.BOOLEAN }?,
    empty
  }
instrVoiceGrp =
  
  ## Several instrumental or vocal resources treated as a group.
  element instrVoiceGrp {
    (text | instrVoice | instrVoiceGrp)*,
    att.common.attributes,
    att.authorized.attributes,
    att.bibl.attributes,
    att.coded.attributes,
    empty
  }
language =
  
  ## Description of a language used in the document. 
  element language {
    (text | model.textphraseLike.limited)*,
    att.common.attributes,
    att.bibl.attributes,
    att.authorized.attributes,
    empty
  }
langUsage =
  
  ## (language usage) – Groups elements describing the languages, sub-languages, dialects, etc., represented within the encoded resource. 
  element langUsage {
    language+,
    att.common.attributes,
    att.bibl.attributes,
    att.datapointing.attributes,
    empty
  }
meiHead =
  
  ## (MEI header) – Supplies the descriptive and declarative metadata prefixed to every MEI-conformant text. 
  element meiHead {
    altId*,
    fileDesc,
    model.headerPart_sequenceOptional,
    revisionDesc?,
    att.bibl.attributes,
    att.common.attributes,
    att.lang.attributes,
    att.meiversion.attributes,
    
    ## specifies the kind of document to which the header is attached, for example whether it is a corpus or individual text.
    attribute type {
      
      ## header is attached to a music document.
      "music"
      | 
        ## header is attached to a corpus.
        "corpus"
    }?,
    empty
  }
notesStmt =
  
  ## (notes statement)– Collects any notes providing information about a text additional to that recorded in other parts of the bibliographic description. 
  element notesStmt {
    model.annotLike+, att.common.attributes, att.bibl.attributes, empty
  }
perfMedium =
  
  ## (performance medium) – Indicates the number and character of the performing forces used in a musical composition. 
  element perfMedium {
    instrumentation?,
    att.common.attributes,
    att.bibl.attributes,
    att.authorized.attributes,
    empty
  }
physDesc =
  
  ## (physical description) – Container for information about the appearance, construction, or handling of physical materials, such as their dimension, quantity, color, style, and technique of creation. 
  element physDesc {
    model.pLike*,
    model.physDescPart*,
    att.common.attributes,
    att.bibl.attributes,
    empty
  }
physMedium =
  
  ## (physical medium) – Records the physical materials used in the source, such as ink and paper. 
  element physMedium {
    (text | model.textphraseLike.limited)*,
    att.common.attributes,
    att.bibl.attributes,
    att.authorized.attributes,
    att.lang.attributes,
    empty
  }
plateNum =
  
  ## (plate number) – Designation assigned to a resource by a music publisher, usually printed at the bottom of each page, and sometimes appearing also on the title page. 
  element plateNum {
    (text | model.textphraseLike.limited)*,
    att.common.attributes,
    att.bibl.attributes,
    empty
  }
price =
  
  ## The cost of access to a bibliographic item.
  element price {
    (text | model.textphraseLike.limited)*,
    att.common.attributes,
    att.bibl.attributes,
    att.measurement.attributes,
    empty
  }
provenance =
  
  ## The record of ownership or custodianship of an item. 
  element provenance {
    (eventList? | (text | model.textphraseLike.limited)*),
    att.common.attributes,
    att.bibl.attributes,
    att.lang.attributes,
    empty
  }
pubStmt =
  
  ## (publication statement) – Container for information regarding the publication or distribution of a bibliographic item, including the publisher's name and address, the date of publication, and other relevant details. 
  element pubStmt {
    (model.pubStmtPart*),
    att.common.attributes,
    att.bibl.attributes,
    empty
  }
revisionDesc =
  
  ## (revision description) – Container for information about alterations that have been made to an MEI file. 
  element revisionDesc {
    change+, att.common.attributes, att.bibl.attributes, empty
  }
seriesStmt =
  
  ## (series statement) – Groups information about the series, if any, to which a publication belongs. 
  element seriesStmt {
    model.titleLike+,
    (respStmt)*,
    (model.identifierLike | contents | seriesStmt)*,
    att.common.attributes,
    att.bibl.attributes,
    empty
  }
source =
  
  ## A bibliographic description of a source used in the creation of the electronic file.
  element source {
    model.identifierLike*,
    titleStmt?,
    macro.bibldescPart,
    contents?,
    history?,
    langUsage?,
    notesStmt?,
    classification?,
    itemList?,
    componentGrp?,
    componentGrp?,
    (relationList?)
    >> sch:pattern [
         id = "wegaWorks-source-id-check-constraint-27"
         "\x{a}" ~
         "        "
         sch:rule [
           context = "mei:source"
           "\x{a}" ~
           "          "
           sch:assert [
             test = "@xml:id or ancestor::mei:source"
             " Am\x{a}" ~
             "                                        Wurzelelement muss eine XML-ID angegeben sein. "
           ]
           "\x{a}" ~
           "        "
         ]
         "\x{a}" ~
         "      "
       ],
    att.typed.attribute.subtype,
    att.common.attribute.label,
    att.common.attribute.n,
    att.common.attribute.xmlbase,
    att.bibl.attributes,
    att.datapointing.attributes,
    att.pointing.attributes,
    
    ## characterizes the element in some sense, using any convenient classification scheme or typology.
    ## Empfohlene Werte sind: 1] ms; 2] pr
    attribute type {
      
      ## Manuscripts
      "ms"
      | 
        ## Prints
        "pr"
      | xsd:NMTOKEN
    },
    
    ## regularizes the naming of an element and thus facilitates building links between it and other resources. Each id attribute within a document must have a unique value.
    attribute xml:id { text }?,
    empty
  }
term =
  
  ## Keyword or phrase which describes a resource. 
  element term {
    (text | term | model.textphraseLike.limited)*,
    att.common.attributes,
    att.bibl.attributes,
    
    ## contains a reference to the controlled vocabulary from which the term is drawn. The value must match the value of an ID attribute on a classCode element given elsewhere in the document.
    attribute classcode { data.URI }?,
    empty
  }
termList =
  
  ## Collection of text phrases which describe a resource.
  element termList {
    term+,
    att.common.attributes,
    att.bibl.attributes,
    
    ## contains a reference to the controlled vocabulary from which the terms are drawn. The value must match the value of an ID attribute on a classCode element given elsewhere in the document.
    attribute classcode { data.URI }?,
    empty
  }
titleStmt =
  
  ## (title statement) – Container for title and responsibility meta-data.
  element titleStmt {
    title+,
    respStmt?,
    att.bibl.attributes,
    att.id.attribute.xmlid,
    empty
  }
useRestrict =
  
  ## (usage restrictions) – Container for information about the conditions that affect use of a bibliographic item after access has been granted. 
  element useRestrict {
    (text | model.textphraseLike.limited)*,
    att.common.attributes,
    att.bibl.attributes,
    empty
  }
watermark =
  
  ## Contains a description of a watermark or similar device. 
  element watermark {
    (text | model.textphraseLike.limited)*,
    att.common.attributes,
    att.bibl.attributes,
    empty
  }
work =
  
  ## Provides a detailed description of a work, specifically its history, language use, and high-level musical attributes: key, tempo, meter, and medium of performance.
  element work {
    model.identifierLike*,
    titleStmt?,
    incip?,
    history?,
    langUsage?,
    perfMedium?,
    notesStmt?,
    classification?,
    bibl?,
    itemList?,
    expressionList?,
    componentGrp?,
    (relationList?)
    >> sch:pattern [
         id = "wegaWorks-work-id-check-constraint-28"
         "\x{a}" ~
         "        "
         sch:rule [
           context = "mei:source"
           "\x{a}" ~
           "          "
           sch:assert [
             test = "@xml:id or ancestor::mei:source"
             " Am\x{a}" ~
             "                                        Wurzelelement muss eine XML-ID angegeben sein. "
           ]
           "\x{a}" ~
           "        "
         ]
         "\x{a}" ~
         "      "
       ],
    att.datapointing.attributes,
    att.common.attributes,
    att.bibl.attributes,
    empty
  }
workDesc =
  
  ## (work description) – Grouping mechanism for information describing non-bibliographic aspects of a text.
  element workDesc { work+, att.common.attributes, empty }
model.nameLike.agent = corpName | persName
model.nameLike.agent_alternation = corpName | persName
model.nameLike.agent_sequence = corpName, persName
model.nameLike.agent_sequenceOptional = corpName?, persName?
model.nameLike.agent_sequenceOptionalRepeatable = corpName*, persName*
model.nameLike.agent_sequenceRepeatable = corpName+, persName+
model.nameLike.geogName = geogName
model.nameLike.geogName_alternation = geogName
model.nameLike.geogName_sequence = geogName
model.nameLike.geogName_sequenceOptional = geogName?
model.nameLike.geogName_sequenceOptionalRepeatable = geogName*
model.nameLike.geogName_sequenceRepeatable = geogName+
model.nameLike.label = periodName
model.nameLike.label_alternation = periodName
model.nameLike.label_sequence = periodName
model.nameLike.label_sequenceOptional = periodName?
model.nameLike.label_sequenceOptionalRepeatable = periodName*
model.nameLike.label_sequenceRepeatable = periodName+
model.nameLike.place = model.repositoryLike | model.nameLike.geogName
model.nameLike.place_alternation =
  model.repositoryLike_alternation | model.nameLike.geogName_alternation
model.nameLike.place_sequence =
  model.repositoryLike_sequence, model.nameLike.geogName_sequence
model.nameLike.place_sequenceOptional =
  model.repositoryLike_sequenceOptional?,
  model.nameLike.geogName_sequenceOptional?
model.nameLike.place_sequenceOptionalRepeatable =
  model.repositoryLike_sequenceOptionalRepeatable*,
  model.nameLike.geogName_sequenceOptionalRepeatable*
model.nameLike.place_sequenceRepeatable =
  model.repositoryLike_sequenceRepeatable+,
  model.nameLike.geogName_sequenceRepeatable+
corpName =
  
  ## (corporate name) – Identifies an organization or group of people that acts as a single entity. 
  element corpName {
    (text
     | model.textphraseLike
     | model.editLike
     | model.transcriptionLike)*,
    att.bibl.attributes,
    att.common.attributes,
    att.datable.attributes,
    att.edit.attributes,
    att.lang.attributes,
    att.name.attributes,
    att.typed.attributes,
    empty
  }
geogName =
  
  ## (geographic name) – The proper noun designation for a place, natural feature, or political jurisdiction. 
  element geogName {
    (text
     | model.textphraseLike
     | model.editLike
     | model.transcriptionLike)*,
    att.bibl.attributes,
    att.common.attributes,
    att.edit.attributes,
    att.lang.attributes,
    att.name.attributes,
    att.typed.attributes,
    empty
  }
periodName =
  
  ## (period name) – A label that describes a period of time, such as 'Baroque' or '3rd Style period'. 
  element periodName {
    (text
     | model.textphraseLike
     | model.editLike
     | model.transcriptionLike)*,
    att.bibl.attributes,
    att.common.attributes,
    att.datable.attributes,
    att.edit.attributes,
    att.lang.attributes,
    att.name.attributes,
    att.typed.attributes,
    empty
  }
persName =
  
  ## (Personenname) enthält einen Eigennamen oder ein Nominalphrase im Bezug auf eine Person, möglicherweise einschließlich einer oder mehrerer Vornamen, Nachnamen, Höflichkeitsformen, hinzugefügten Namen, usw.
  element persName {
    (text
     | model.textphraseLike
     | model.editLike
     | model.transcriptionLike)*,
    att.bibl.attributes,
    
    ## Die Rolle oder Beziehung der Person mit dem Text/der Partitur. Werte werden von der MARC Code List for Relators genommen.
    attribute role { marcRelator.list }?,
    
    ## Die WeGA ID der jeweiligen Person, z.B. "A002068" für Carl Maria von Weber
    attribute dbkey { key.person.pattern }?,
    
    ## signifies the degree of certainty or precision of identifying this person.besagt den Grad der Gewissheit oder Präzision der Identifikation der Person.
    attribute cert { data.CERTAINTY }?,
    empty
  }
att.beam.anl.attributes = empty
att.beam.ges.attributes = empty
att.beam.log.attributes =
  att.event.attributes, att.beamedwith.attributes
att.beam.vis.attributes = att.color.attributes, att.beamrend.attributes
att.beamed.attributes = att.beamed.attribute.beam
att.beamed.attribute.beam =
  
  ## indicates that this event is "under a beam".
  attribute beam { data.BEAMS }?
att.beamedwith.attributes = att.beamedwith.attribute.beam.with
att.beamedwith.attribute.beam.with =
  
  ## In the case of cross-staff beams, the beam.with attribute is used to indicate which staff the beam is connected to; that is, the staff above or the staff below.
  attribute beam.with { data.OTHERSTAFF }?
att.beaming.log.attributes =
  att.beaming.log.attribute.beam.group,
  att.beaming.log.attribute.beam.rests
att.beaming.log.attribute.beam.group =
  
  ## provides an example of how automated beaming (including secondary beams) is to be performed. 
  attribute beam.group { text }?
att.beaming.log.attribute.beam.rests =
  
  ## indicates whether automatically-drawn beams should include rests shorter than a quarter note duration.
  attribute beam.rests { data.BOOLEAN }?
att.beamrend.attributes =
  att.beamrend.attribute.rend, att.beamrend.attribute.slope
att.beamrend.attribute.rend =
  
  ## captures whether a beam is "feathered" and in which direction.
  attribute rend {
    
    ## (accelerando) indicates that the secondary beams get progressively closer together toward the end of the beam.
    "acc"
    | 
      ## (mixed acc and rit) for beams that are "feathered" in both directions.
      "mixed"
    | 
      ## (ritardando) means that the secondary beams become progressively more distance toward the end of the beam.
      "rit"
    | 
      ## (normal) indicates that the secondary beams are equidistant along the course of the beam.
      "norm"
  }?
att.beamrend.attribute.slope =
  
  ## records the slope of the beam.
  attribute slope { xsd:decimal }?
att.beamsecondary.attributes = att.beamsecondary.attribute.breaksec
att.beamsecondary.attribute.breaksec =
  
  ## presence of this attribute indicates that the secondary beam should be broken following this note/chord. The value of the attribute records the number of beams which should remain unbroken.
  attribute breaksec { xsd:positiveInteger }?
att.beatRpt.anl.attributes = empty
att.beatRpt.ges.attributes = empty
att.beatRpt.log.attributes = att.event.attributes
att.beatRpt.vis.attributes =
  att.altsym.attributes,
  att.color.attributes,
  att.expandable.attributes,
  att.beatRpt.vis.attribute.rend
att.beatRpt.vis.attribute.rend =
  
  ## indicates the number of slashes required to render the appropriate beat repeat symbol. When a single beat is repeated, consisting of a single note or chord, it is indicated by a single thick, slanting slash; therefore, the value '1' should be used. The following values should be used when the beat is divided into even notes: 4ths or 8ths=1, 16ths=2, 32nds=3, 64ths=4, 128ths=5. When the beat is comprised of mixed duration values, the symbol is always rendered as 2 slashes and 2 dots.
  attribute rend { data.BEATRPT.REND }
att.bTrem.anl.attributes = empty
att.bTrem.ges.attributes = att.tremmeasured.attributes
att.bTrem.log.attributes =
  att.event.attributes,
  att.augmentdots.attributes,
  att.duration.musical.attributes,
  att.numbered.attributes,
  att.bTrem.log.attribute.form
att.bTrem.log.attribute.form =
  
  ## describes the style of the tremolo.
  attribute form {
    
    ## measured tremolo.
    "meas"
    | 
      ## unmeasured tremolo.
      "unmeas"
  }?
att.bTrem.vis.attributes = att.numberplacement.attributes
att.chord.ges.cmn.attributes = att.graced.attributes
att.chord.log.cmn.attributes =
  att.beamed.attributes, att.lvpresent.attributes, att.ornam.attributes
att.chord.vis.cmn.attributes = att.beamsecondary.attributes
att.cutout.attributes = att.cutout.attribute.cutout
att.cutout.attribute.cutout =
  
  ## "Cut-out" style indicated for this measure.
  attribute cutout {
    
    ## the staff lines should not be drawn.
    "cutout"
  }?
att.expandable.attributes = att.expandable.attribute.expand
att.expandable.attribute.expand =
  
  ## indicates whether to render a repeat symbol or the source material to which it refers. A value of 'true' renders the source material, while 'false' displays the repeat symbol.
  attribute expand { data.BOOLEAN }?
att.fermata.anl.attributes = empty
att.fermata.ges.attributes = att.duration.performed.attributes
att.fermata.log.attributes =
  att.controlevent.attributes, att.startendid.attributes
att.fermata.vis.attributes =
  att.altsym.attributes,
  att.color.attributes,
  att.placement.attributes,
  att.visualoffset.attributes,
  att.xy.attributes,
  att.fermata.vis.attribute.form,
  att.fermata.vis.attribute.shape
att.fermata.vis.attribute.form =
  
  ## describes the visual appearance of the fermata; that is, whether it occurs as upright or inverted.
  attribute form {
    
    ## inverted, i.e., curve or bracket below the dot.
    "inv"
    | 
      ## upright; i.e., curve or bracket above the dot.
      "norm"
  }?
att.fermata.vis.attribute.shape =
  
  ## describes the visual appearance of the fermata; that is, whether it has a curved or square shape.
  attribute shape {
    
    ## a curve above or below the dot.
    "curved"
    | 
      ## a bracket above or below the dot.
      "square"
  }?
att.fTrem.anl.attributes = empty
att.fTrem.ges.attributes = att.tremmeasured.attributes
att.fTrem.log.attributes =
  att.event.attributes,
  att.augmentdots.attributes,
  att.duration.musical.attributes,
  att.fTrem.log.attribute.form
att.fTrem.log.attribute.form =
  
  ## describes the style of the tremolo.
  attribute form {
    
    ## measured tremolo.
    "meas"
    | 
      ## unmeasured tremolo.
      "unmeas"
  }?
att.fTrem.vis.attributes = att.slashcount.attributes
att.graced.attributes =
  att.graced.attribute.grace, att.graced.attribute.grace.time
att.graced.attribute.grace =
  
  ## marks a note or chord as a "grace" (without a definitive written duration) and records from which other note/chord it should "steal" time.
  attribute grace { data.GRACE }?
att.graced.attribute.grace.time =
  
  ## records the amount of time to be "stolen" from a non-grace note/chord.
  attribute grace.time { data.PERCENT }?
att.hairpin.anl.attributes = empty
att.hairpin.ges.attributes = att.duration.performed.attributes
att.hairpin.log.attributes =
  att.controlevent.attributes,
  att.augmentdots.attributes,
  att.duration.additive.attributes,
  att.startendid.attributes,
  att.timestamp2.musical.attributes,
  att.hairpin.log.attribute.form
att.hairpin.log.attribute.form =
  
  ## captures the visual rendition and function of the hairpin; that is, whether it indicates an increase or a decrease in volume.
  attribute form {
    
    ## crescendo; i.e., louder.
    "cres"
    | 
      ## diminuendo; i.e., softer.
      "dim"
  }
att.hairpin.vis.attributes =
  att.color.attributes,
  att.placement.attributes,
  att.visualoffset.attributes,
  att.visualoffset2.attributes,
  att.xy.attributes,
  att.xy2.attributes,
  att.hairpin.vis.attribute.opening
att.hairpin.vis.attribute.opening =
  
  ## specifies the distance between the points of the open end of a hairpin dynamic mark.
  attribute opening { data.MEASUREMENT }?
att.halfmRpt.anl.attributes = empty
att.halfmRpt.ges.attributes = empty
att.halfmRpt.log.attributes =
  att.event.attributes, att.duration.musical.attributes
att.halfmRpt.vis.attributes =
  att.altsym.attributes,
  att.color.attributes,
  att.expandable.attributes,
  att.visualoffset.attributes
att.lvpresent.attributes = att.lvpresent.attribute.lv
att.lvpresent.attribute.lv =
  
  ## indicates the attachment of an l.v. (laissez vibrer) sign to this element.
  attribute lv { data.BOOLEAN }?
att.measure.vis.attributes =
  att.barplacement.attributes,
  att.measurement.attributes,
  att.width.attributes
att.mRest.anl.attributes = empty
att.mRest.ges.attributes =
  att.duration.performed.attributes, att.instrumentident.attributes
att.mRest.log.attributes =
  att.duration.musical.attributes,
  att.event.attributes,
  att.fermatapresent.attributes
att.mRest.vis.attributes =
  att.altsym.attributes,
  att.cutout.attributes,
  att.relativesize.attributes,
  att.staffloc.attributes,
  att.staffloc.pitched.attributes,
  att.visualoffset.attributes,
  att.visibility.attributes,
  att.xy.attributes
att.mRpt.anl.attributes = empty
att.mRpt.ges.attributes = empty
att.mRpt.log.attributes = att.event.attributes
att.mRpt.vis.attributes =
  att.altsym.attributes, att.color.attributes, att.expandable.attributes
att.note.ges.cmn.attributes =
  att.graced.attributes, att.note.ges.cmn.attribute.gliss
att.note.ges.cmn.attribute.gliss =
  
  ## indicates that this element participates in a glissando.
  attribute gliss { data.GLISSANDO }?
att.note.log.cmn.attributes =
  att.beamed.attributes, att.lvpresent.attributes, att.ornam.attributes
att.note.vis.cmn.attributes = att.beamsecondary.attributes
att.numbered.attributes = att.numbered.attribute.num
att.numbered.attribute.num =
  
  ## records a number or count accompanying a notational feature.
  attribute num { xsd:positiveInteger }?
att.numberplacement.attributes =
  att.numberplacement.attribute.num.place,
  att.numberplacement.attribute.num.visible
att.numberplacement.attribute.num.place =
  
  ## states where the tuplet number will be placed in relation to the note heads.
  attribute num.place { data.PLACE }?
att.numberplacement.attribute.num.visible =
  
  ## determines if the tuplet number is visible.
  attribute num.visible { data.BOOLEAN }?
att.pianopedals.attributes = att.pianopedals.attribute.pedal.style
att.pianopedals.attribute.pedal.style =
  
  ## determines whether piano pedal marks should be rendered as lines or as terms.
  attribute pedal.style {
    
    ## continuous line with start and end positions rendered by vertical bars and bounces shown by upward-pointing "blips".
    "line"
    | 
      ## pedal down and half pedal rendered with "Ped.", pedal up rendered by "*", pedal "bounce" rendered with "* Ped.".
      "pedstar"
    | 
      ## pedal up and down indications same as with "pedstar", but bounce is rendered with "Ped." only.
      "altpedstar"
  }?
att.rehearsal.attributes = att.rehearsal.attribute.reh.enclose
att.rehearsal.attribute.reh.enclose =
  
  ## describes the enclosing shape for rehearsal marks.
  attribute reh.enclose {
    
    ## enclosed by box.
    "box"
    | 
      ## enclosed by circle.
      "circle"
    | 
      ## no enclosing shape.
      "none"
  }?
att.rest.log.cmn.attributes = att.beamed.attributes
att.rest.vis.cmn.attributes = empty
att.scoreDef.log.cmn.attributes = att.beaming.log.attributes
att.scoreDef.vis.cmn.attributes =
  att.beaming.vis.attributes,
  att.pianopedals.attributes,
  att.rehearsal.attributes,
  att.slurrend.attributes,
  att.tierend.attributes,
  att.scoreDef.vis.cmn.attribute.grid.show
att.scoreDef.vis.cmn.attribute.grid.show =
  
  ## determines whether to display guitar chord grids.
  attribute grid.show { data.BOOLEAN }?
att.slur.anl.attributes = att.joined.attributes
att.slur.ges.attributes = att.duration.performed.attributes
att.slur.log.attributes =
  att.controlevent.attributes,
  att.augmentdots.attributes,
  att.duration.additive.attributes,
  att.startendid.attributes,
  att.timestamp2.musical.attributes
att.slur.vis.attributes =
  att.color.attributes,
  att.visualoffset.attributes,
  att.visualoffset2.attributes,
  att.xy.attributes,
  att.xy2.attributes,
  att.curvature.attributes,
  att.curverend.attributes
att.slurrend.attributes = att.slurrend.attribute.slur.rend
att.slurrend.attribute.slur.rend =
  
  ## describes the line style of the slur.
  attribute slur.rend { data.CURVERENDITION }?
att.space.log.cmn.attributes = att.beamed.attributes
att.staffDef.log.cmn.attributes = att.beaming.log.attributes
att.staffDef.vis.cmn.attributes =
  att.beaming.vis.attributes,
  att.pianopedals.attributes,
  att.rehearsal.attributes,
  att.slurrend.attributes,
  att.tierend.attributes
att.stemmed.cmn.attributes =
  att.stemmed.cmn.attribute.stem.mod,
  att.stemmed.cmn.attribute.stem.with
att.stemmed.cmn.attribute.stem.mod =
  
  ## encodes any stem "modifiers"; that is, symbols rendered on the stem, such as tremolo or Sprechstimme indicators.
  attribute stem.mod { data.STEMMODIFIER }?
att.stemmed.cmn.attribute.stem.with =
  
  ## contains an indication of which staff a note or chord that logically belongs to the current staff should be visually placed on; that is, the one above or the one below.
  attribute stem.with { data.OTHERSTAFF }?
att.tie.anl.attributes = empty
att.tie.ges.attributes = empty
att.tie.log.attributes =
  att.controlevent.attributes,
  att.startendid.attributes,
  att.timestamp2.musical.attributes
att.tie.vis.attributes =
  att.color.attributes,
  att.visualoffset.attributes,
  att.visualoffset2.attributes,
  att.xy.attributes,
  att.xy2.attributes,
  att.curvature.attributes,
  att.curverend.attributes
att.tierend.attributes = att.tierend.attribute.tie.rend
att.tierend.attribute.tie.rend =
  
  ## describes the line style of the tie.
  attribute tie.rend { data.CURVERENDITION }?
att.tremmeasured.attributes = att.tremmeasured.attribute.measperf
att.tremmeasured.attribute.measperf =
  
  ## the performed duration of an individual note in a measured tremolo.
  attribute measperf { data.DURATION.cmn }?
att.tuplet.anl.attributes = empty
att.tuplet.ges.attributes = att.duration.performed.attributes
att.tuplet.log.attributes =
  att.event.attributes,
  att.beamedwith.attributes,
  att.augmentdots.attributes,
  att.duration.additive.attributes,
  att.duration.ratio.attributes,
  att.startendid.attributes
att.tuplet.vis.attributes =
  att.color.attributes,
  att.numberplacement.attributes,
  att.tuplet.vis.attribute.bracket.place,
  att.tuplet.vis.attribute.bracket.visible,
  att.tuplet.vis.attribute.dur.visible,
  att.tuplet.vis.attribute.num.format
att.tuplet.vis.attribute.bracket.place =
  
  ## used to state where a tuplet bracket will be placed in relation to the note heads.
  attribute bracket.place { data.PLACE }?
att.tuplet.vis.attribute.bracket.visible =
  
  ## states whether a bracket should be rendered with a tuplet.
  attribute bracket.visible { data.BOOLEAN }?
att.tuplet.vis.attribute.dur.visible =
  
  ## determines if the tuplet duration is visible.
  attribute dur.visible { data.BOOLEAN }?
att.tuplet.vis.attribute.num.format =
  
  ## controls how the num:numbase ratio is to be displayed.
  attribute num.format {
    
    ## only the num attribute is displayed, e.g., '7'.
    "count"
    | 
      ## both the num and numbase attributes are displayed, e.g., '7:4'.
      "ratio"
  }?
model.controleventLike.cmn =
  fermata | hairpin | slur | tie | model.ornamentLike.cmn
model.controleventLike.cmn_alternation =
  fermata | hairpin | slur | tie | model.ornamentLike.cmn_alternation
model.controleventLike.cmn_sequence =
  fermata, hairpin, slur, tie, model.ornamentLike.cmn_sequence
model.controleventLike.cmn_sequenceOptional =
  fermata?,
  hairpin?,
  slur?,
  tie?,
  model.ornamentLike.cmn_sequenceOptional?
model.controleventLike.cmn_sequenceOptionalRepeatable =
  fermata*,
  hairpin*,
  slur*,
  tie*,
  model.ornamentLike.cmn_sequenceOptionalRepeatable*
model.controleventLike.cmn_sequenceRepeatable =
  fermata+,
  hairpin+,
  slur+,
  tie+,
  model.ornamentLike.cmn_sequenceRepeatable+
model.eventLike.cmn = beam | beatRpt | bTrem | fTrem | halfmRpt | tuplet
model.eventLike.cmn_alternation =
  beam | beatRpt | bTrem | fTrem | halfmRpt | tuplet
model.eventLike.cmn_sequence =
  beam, beatRpt, bTrem, fTrem, halfmRpt, tuplet
model.eventLike.cmn_sequenceOptional =
  beam?, beatRpt?, bTrem?, fTrem?, halfmRpt?, tuplet?
model.eventLike.cmn_sequenceOptionalRepeatable =
  beam*, beatRpt*, bTrem*, fTrem*, halfmRpt*, tuplet*
model.eventLike.cmn_sequenceRepeatable =
  beam+, beatRpt+, bTrem+, fTrem+, halfmRpt+, tuplet+
model.eventLike.measureFilling = mRest | mRpt
model.eventLike.measureFilling_alternation = mRest | mRpt
model.eventLike.measureFilling_sequence = mRest, mRpt
model.eventLike.measureFilling_sequenceOptional = mRest?, mRpt?
model.eventLike.measureFilling_sequenceOptionalRepeatable =
  mRest*, mRpt*
model.eventLike.measureFilling_sequenceRepeatable = mRest+, mRpt+
model.layerPart.cmn = model.eventLike.measureFilling
model.measureLike = measure
model.measureLike_alternation = measure
model.measureLike_sequence = measure
model.measureLike_sequenceOptional = measure?
model.measureLike_sequenceOptionalRepeatable = measure*
model.measureLike_sequenceRepeatable = measure+
model.measurePart =
  model.controleventLike
  | model.staffLike
  | model.ossiaLike
  | model.lyricsLike
model.ossiaLike = notAllowed
model.sectionPart.cmn = model.measureLike
beam =
  
  ## A container for a series of explicitly beamed events that begins and ends entirely within a measure. 
  element beam {
    ((model.eventLike | model.editLike | model.transcriptionLike)*)
    >> sch:pattern [
         id =
           "wegaWorks-beam-When_not_copyof_beam_content-constraint-29"
         "\x{a}" ~
         "        "
         sch:rule [
           context = "mei:beam[not(@copyof)]"
           "\x{a}" ~
           "          "
           sch:assert [
             test =
               "count(descendant::*[local-name()='note' or local-name()='rest' or               local-name()='chord' or local-name()='space']) > 1"
             "A beam without a copyof\x{a}" ~
             "              attribute must have at least 2 note, rest, chord, or space descendants."
           ]
           "\x{a}" ~
           "        "
         ]
         "\x{a}" ~
         "      "
       ],
    att.common.attributes,
    att.beam.log.attributes,
    att.beam.vis.attributes,
    att.beam.ges.attributes,
    att.beam.anl.attributes,
    empty
  }
beatRpt =
  
  ## (beat repeat) – An indication that material on a preceding beat should be repeated. 
  element beatRpt {
    empty,
    att.common.attributes,
    att.beatRpt.log.attributes,
    att.beatRpt.vis.attributes,
    att.beatRpt.ges.attributes,
    att.beatRpt.anl.attributes,
    empty
  }
bTrem =
  
  ## (bowed tremolo) – A rapid alternation on a single pitch or chord.
  element bTrem {
    (chord | note),
    att.common.attributes,
    att.bTrem.log.attributes,
    att.bTrem.vis.attributes,
    att.bTrem.ges.attributes,
    att.bTrem.anl.attributes,
    empty
  }
fermata =
  
  ## An indication placed over a note or rest to indicate that it should be held longer than its written value. May also occur over a bar line to indicate the end of a phrase or section. Sometimes called a 'hold' or 'pause'. 
  element fermata {
    empty
    >> sch:pattern [
         id =
           "wegaWorks-fermata-Start-type_attributes_required_on_some_control_events-constraint-30"
         "\x{a}" ~
         "        "
         sch:rule [
           context = "mei:fermata"
           "\x{a}" ~
           "          "
           sch:assert [
             test = "@startid or @tstamp or @tstamp.ges or @tstamp.real"
             " Must have one of\x{a}" ~
             "              the attributes: startid, tstamp, tstamp.ges or tstamp.real"
           ]
           "\x{a}" ~
           "        "
         ]
         "\x{a}" ~
         "      "
       ],
    att.common.attributes,
    att.fermata.log.attributes,
    att.fermata.vis.attributes,
    att.fermata.ges.attributes,
    att.fermata.anl.attributes,
    empty
  }
fTrem =
  
  ## (fingered tremolo) – A rapid alternation between a pair of notes (or chords or perhaps between a note and a chord) that are (usually) farther apart than a major second.
  element fTrem {
    ((chord, (chord | note))
     | (note, (chord | note))),
    att.common.attributes,
    att.fTrem.log.attributes,
    att.fTrem.vis.attributes,
    att.fTrem.ges.attributes,
    att.fTrem.anl.attributes,
    empty
  }
hairpin =
  
  ## Indicates continuous dynamics expressed on the score as wedge-shaped graphics, e.g. < and >. 
  element hairpin {
    empty
    >> sch:pattern [
         id =
           "wegaWorks-hairpin-Start-_and_end-type_attributes_required_on_some_control_events-constraint-31"
         "\x{a}" ~
         "        "
         sch:rule [
           context = "mei:hairpin"
           "\x{a}" ~
           "          "
           sch:assert [
             test = "@startid or @tstamp or @tstamp.ges or @tstamp.real"
             " Must have one of\x{a}" ~
             "              the attributes: startid, tstamp, tstamp.ges or tstamp.real"
           ]
           "\x{a}" ~
           "          "
           sch:assert [
             test = "@dur or @dur.ges or @endid or @tstamp2"
             "Must have one of the\x{a}" ~
             "              attributes: dur, dur.ges, endid, or tstamp2"
           ]
           "\x{a}" ~
           "        "
         ]
         "\x{a}" ~
         "      "
       ],
    att.common.attributes,
    att.hairpin.log.attributes,
    att.hairpin.vis.attributes,
    att.hairpin.ges.attributes,
    att.hairpin.anl.attributes,
    empty
  }
halfmRpt =
  
  ## (half-measure repeat) – A half-measure repeat in any meter.
  element halfmRpt {
    empty,
    att.common.attributes,
    att.halfmRpt.log.attributes,
    att.halfmRpt.vis.attributes,
    att.halfmRpt.ges.attributes,
    att.halfmRpt.anl.attributes,
    empty
  }
measure =
  
  ## Unit of musical time consisting of a fixed number of note-values of a given type, as determined by the prevailing meter, and delimited in musical notation by two bar lines. 
  element measure {
    (model.milestoneLike.music
     | model.staffDefLike
     | model.annotLike
     | model.editLike
     | model.transcriptionLike
     | model.measurePart)*,
    att.common.attributes,
    att.declaring.attributes,
    att.typed.attributes,
    att.pointing.attributes,
    att.measure.log.attributes,
    att.measure.vis.attributes,
    att.measure.ges.attributes,
    att.measure.anl.attributes,
    empty
  }
mRest =
  
  ## (measure rest) – Complete measure rest in any meter. 
  element mRest {
    empty,
    att.common.attributes,
    att.mRest.log.attributes,
    att.mRest.vis.attributes,
    att.mRest.ges.attributes,
    att.mRest.anl.attributes,
    empty
  }
mRpt =
  
  ## (measure repeat) – An indication that the previous measure should be repeated. 
  element mRpt {
    empty,
    att.common.attributes,
    att.mRpt.log.attributes,
    att.mRpt.vis.attributes,
    att.mRpt.ges.attributes,
    att.mRpt.anl.attributes,
    empty
  }
slur =
  
  ## Indication of 1) a "unified melodic idea" or 2) performance technique. 
  element slur {
    empty
    >> sch:pattern [
         id =
           "wegaWorks-slur-Start-_and_end-type_attributes_required_on_some_control_events-constraint-32"
         "\x{a}" ~
         "        "
         sch:rule [
           context = "mei:slur"
           "\x{a}" ~
           "          "
           sch:assert [
             test = "@startid or @tstamp or @tstamp.ges or @tstamp.real"
             " Must have one of\x{a}" ~
             "              the attributes: startid, tstamp, tstamp.ges or tstamp.real"
           ]
           "\x{a}" ~
           "          "
           sch:assert [
             test = "@dur or @dur.ges or @endid or @tstamp2"
             "Must have one of the\x{a}" ~
             "              attributes: dur, dur.ges, endid, or tstamp2"
           ]
           "\x{a}" ~
           "        "
         ]
         "\x{a}" ~
         "      "
       ],
    att.common.attributes,
    att.typed.attributes,
    att.slur.log.attributes,
    att.slur.vis.attributes,
    att.slur.ges.attributes,
    att.slur.anl.attributes,
    empty
  }
tie =
  
  ## An indication that two notes of the same pitch form a single note with their combined rhythmic values. 
  element tie {
    empty
    >> sch:pattern [
         id =
           "wegaWorks-tie-Start-_and_end-type_attributes_required_on_some_control_events-constraint-33"
         "\x{a}" ~
         "        "
         sch:rule [
           context = "mei:tie"
           "\x{a}" ~
           "          "
           sch:assert [
             test = "@startid or @tstamp or @tstamp.ges or @tstamp.real"
             " Must have one of\x{a}" ~
             "              the attributes: startid, tstamp, tstamp.ges or tstamp.real"
           ]
           "\x{a}" ~
           "          "
           sch:assert [
             test = "@dur or @dur.ges or @endid or @tstamp2"
             "Must have one of the\x{a}" ~
             "              attributes: dur, dur.ges, endid, or tstamp2"
           ]
           "\x{a}" ~
           "        "
         ]
         "\x{a}" ~
         "      "
       ],
    att.common.attributes,
    att.typed.attributes,
    att.tie.log.attributes,
    att.tie.vis.attributes,
    att.tie.ges.attributes,
    att.tie.anl.attributes,
    empty
  }
tuplet =
  
  ## A group of notes with "irregular" (sometimes called "irrational") rhythmic values, for example, three notes in the time normally occupied by two or nine in the time of five. 
  element tuplet {
    ((model.eventLike | model.editLike | model.transcriptionLike)*)
    >> sch:pattern [
         id =
           "wegaWorks-tuplet-When_not_copyof_tuplet_content-constraint-34"
         "\x{a}" ~
         "        "
         sch:rule [
           context = "mei:tuplet[not(@copyof)]"
           "\x{a}" ~
           "          "
           sch:assert [
             test =
               "count(descendant::*[local-name()='note' or local-name()='rest' or               local-name()='chord']) > 1"
             "A tuplet without a copyof attribute must have at least\x{a}" ~
             "              2 note, rest, or chord descendants."
           ]
           "\x{a}" ~
           "        "
         ]
         "\x{a}" ~
         "      "
       ],
    att.common.attributes,
    att.tuplet.log.attributes,
    att.tuplet.vis.attributes,
    att.tuplet.ges.attributes,
    att.tuplet.anl.attributes,
    empty
  }
att.ornam.attributes = att.ornam.attribute.ornam
att.ornam.attribute.ornam =
  
  ## indicates that this element has an attached ornament. If visual information about the ornament is needed, then one of the elements that represents an ornament (mordent, trill, or turn) should be employed.
  attribute ornam { data.ORNAMS.cmn }?
att.ornamentaccid.attributes =
  att.ornamentaccid.attribute.accidupper,
  att.ornamentaccid.attribute.accidlower
att.ornamentaccid.attribute.accidupper =
  
  ## records the written accidental associated with an upper neighboring note.
  attribute accidupper { data.ACCIDENTAL.EXPLICIT }?
att.ornamentaccid.attribute.accidlower =
  
  ## records the written accidental associated with a lower neighboring note.
  attribute accidlower { data.ACCIDENTAL.EXPLICIT }?
att.trill.anl.attributes = empty
att.trill.ges.attributes = att.duration.performed.attributes
att.trill.log.attributes =
  att.controlevent.attributes,
  att.augmentdots.attributes,
  att.duration.additive.attributes,
  att.ornamentaccid.attributes,
  att.startendid.attributes,
  att.timestamp2.musical.attributes
att.trill.vis.attributes =
  att.color.attributes,
  att.placement.attributes,
  att.visualoffset.attributes,
  att.visualoffset2.ho.attributes,
  att.visualoffset2.to.attributes,
  att.xy.attributes
att.turn.anl.attributes = empty
att.turn.ges.attributes = empty
att.turn.log.attributes =
  att.controlevent.attributes,
  att.ornamentaccid.attributes,
  att.startid.attributes,
  att.turn.log.attribute.delayed,
  att.turn.log.attribute.form
att.turn.log.attribute.delayed =
  
  ## When the delayed attribute is set to 'true', the turn begins on the second half of the beat. See Read, p. 246.
  attribute delayed { data.BOOLEAN }?
att.turn.log.attribute.form =
  
  ## indicates the style of the turn.
  attribute form {
    
    ## inverted turn, e.g., begins on the note below the written note.
    "inv"
    | 
      ## "normal" turn, e.g., begins on the note above the written note.
      "norm"
  }?
att.turn.vis.attributes =
  att.color.attributes,
  att.placement.attributes,
  att.visualoffset.attributes,
  att.xy.attributes
model.ornamentLike.cmn = trill | turn
model.ornamentLike.cmn_alternation = trill | turn
model.ornamentLike.cmn_sequence = trill, turn
model.ornamentLike.cmn_sequenceOptional = trill?, turn?
model.ornamentLike.cmn_sequenceOptionalRepeatable = trill*, turn*
model.ornamentLike.cmn_sequenceRepeatable = trill+, turn+
trill =
  
  ## Rapid alternation of a note with one (usually at the interval of a second) above. 
  element trill {
    empty
    >> sch:pattern [
         id =
           "wegaWorks-trill-Start-type_attributes_required_on_some_control_events-constraint-35"
         "\x{a}" ~
         "        "
         sch:rule [
           context = "mei:trill"
           "\x{a}" ~
           "          "
           sch:assert [
             test = "@startid or @tstamp or @tstamp.ges or @tstamp.real"
             " Must have one of\x{a}" ~
             "              the attributes: startid, tstamp, tstamp.ges or tstamp.real"
           ]
           "\x{a}" ~
           "        "
         ]
         "\x{a}" ~
         "      "
       ],
    att.common.attributes,
    att.trill.log.attributes,
    att.trill.vis.attributes,
    att.trill.ges.attributes,
    att.trill.anl.attributes,
    empty
  }
turn =
  
  ## An ornament consisting of four notes — the upper neighbor of the written note, the written note, the lower neighbor, and the written note. 
  element turn {
    empty
    >> sch:pattern [
         id =
           "wegaWorks-turn-Start-type_attributes_required_on_some_control_events-constraint-36"
         "\x{a}" ~
         "        "
         sch:rule [
           context = "mei:turn"
           "\x{a}" ~
           "          "
           sch:assert [
             test = "@startid or @tstamp or @tstamp.ges or @tstamp.real"
             "Must have one of\x{a}" ~
             "              the attributes: startid, tstamp, tstamp.ges or tstamp.real"
           ]
           "\x{a}" ~
           "        "
         ]
         "\x{a}" ~
         "      "
       ],
    att.common.attributes,
    att.turn.log.attributes,
    att.turn.vis.attributes,
    att.turn.ges.attributes,
    att.turn.anl.attributes,
    empty
  }
att.verse.anl.attributes = empty
att.verse.ges.attributes = empty
att.verse.log.attributes =
  att.verse.log.attribute.refrain, att.verse.log.attribute.rhythm
att.verse.log.attribute.refrain =
  
  ## used to indicate a common, usually centered, refrain (Mup User's Guide, p. 44).
  attribute refrain { data.BOOLEAN }?
att.verse.log.attribute.rhythm =
  
  ## used to specify a rhythm for the lyric syllables that differs from that of the notes on the staff, e.g. '4,4,4,4' when the rhythm of the notes is '4.,8,4.,8'.
  attribute rhythm { text }?
att.verse.vis.attributes =
  att.typography.attributes,
  att.visualoffset.to.attributes,
  att.visualoffset.vo.attributes,
  att.xy.attributes
model.lyricsLike = notAllowed
model.sylLike = notAllowed
model.verseLike = verse
att.agentident.attributes = att.agentident.attribute.agent
att.agentident.attribute.agent =
  
  ## signifies the causative agent of damage, illegibility, or other loss of original text.
  attribute agent { text }?
att.edit.attributes =
  att.responsibility.attributes,
  att.edit.attribute.cert,
  att.edit.attribute.evidence
att.edit.attribute.cert =
  
  ## signifies the degree of certainty or precision associated with a feature.
  attribute cert { data.CERTAINTY }?
att.edit.attribute.evidence =
  
  ## indicates the nature of the evidence supporting the reliability or accuracy of the intervention or interpretation. Suggested values include: 'internal', 'external', 'conjecture'.
  attribute evidence { xsd:NMTOKEN }?
att.extent.attributes = att.extent.attribute.extent
att.extent.attribute.extent =
  
  ## indicates the extent of damage or omission.
  attribute extent { text }?
att.reasonident.attributes = att.reasonident.attribute.reason
att.reasonident.attribute.reason =
  
  ## holds a short phrase describing the reason for missing textual material (gap), why material is supplied (supplied), or why transcription is difficult (unclear).
  attribute reason { text }?
att.trans.attributes = att.handident.attributes, att.sequence.attributes
model.editLike = subst
model.transcriptionLike =
  add | damage | del | gap | restore | sic | supplied
add =
  
  ## (addition) – Marks an addition to the text. 
  element add {
    (text
     | model.textphraseLike
     | model.eventLike
     | model.controleventLike
     | model.lyricsLike
     | model.editLike
     | model.transcriptionLike
     | model.eventLike.measureFilling
     | model.noteModifierLike
     | model.sectionLike
     | model.measureLike
     | model.staffLike
     | model.layerLike)*,
    att.common.attributes,
    att.edit.attributes,
    att.trans.attributes,
    empty
  }
damage =
  
  ## Contains an area of damage to the physical medium.
  element damage {
    (text
     | model.textphraseLike
     | model.eventLike
     | model.controleventLike
     | model.lyricsLike
     | model.editLike
     | model.transcriptionLike
     | model.eventLike.measureFilling
     | model.noteModifierLike
     | model.sectionLike
     | model.measureLike
     | model.staffLike
     | model.layerLike)*,
    att.agentident.attributes,
    att.common.attributes,
    att.extent.attributes,
    att.handident.attributes,
    att.typed.attributes,
    
    ## records the degree of damage.
    attribute degree { text }?,
    empty
  }
del =
  
  ## (deletion) – Contains information deleted, marked as deleted, or otherwise indicated as superfluous or spurious in the copy text by an author, scribe, annotator, or corrector. 
  element del {
    (text
     | model.textphraseLike
     | model.eventLike
     | model.controleventLike
     | model.lyricsLike
     | model.editLike
     | model.transcriptionLike
     | model.eventLike.measureFilling
     | model.noteModifierLike
     | model.sectionLike
     | model.measureLike
     | model.staffLike
     | model.layerLike)*,
    att.common.attributes,
    att.trans.attributes,
    
    ## contains an indication of how the deletion should be rendered.
    attribute rend { text }?,
    empty
  }
gap =
  
  ## Indicates a point where material has been omitted in a transcription, whether as part of sampling practice or for editorial reasons described in the MEI header. 
  element gap {
    empty,
    att.common.attributes,
    att.edit.attributes,
    att.extent.attributes,
    att.handident.attributes,
    att.reasonident.attributes,
    att.measurement.attributes,
    empty
  }
restore =
  
  ## Indicates restoration of material to an earlier state by cancellation of an editorial or authorial marking or instruction. 
  element restore {
    (text
     | model.textphraseLike
     | model.eventLike
     | model.controleventLike
     | model.lyricsLike
     | model.editLike
     | model.transcriptionLike
     | model.eventLike.measureFilling
     | model.noteModifierLike
     | model.sectionLike
     | model.measureLike
     | model.staffLike
     | model.layerLike)*,
    att.common.attributes,
    att.edit.attributes,
    att.trans.attributes,
    att.typed.attributes,
    
    ## provides a description of the means of restoration.
    attribute desc { text }?,
    empty
  }
sic =
  
  ## Contains apparently incorrect or inaccurate material. 
  element sic {
    (text
     | model.textphraseLike
     | model.eventLike
     | model.controleventLike
     | model.lyricsLike
     | model.editLike
     | model.transcriptionLike
     | model.eventLike.measureFilling
     | model.noteModifierLike
     | model.sectionLike
     | model.measureLike
     | model.staffLike
     | model.layerLike)*,
    att.common.attributes,
    empty
  }
subst =
  
  ## (substitution) – Groups transcriptional elements when the combination is to be regarded as a single intervention in the text. 
  element subst {
    model.transcriptionLike,
    model.transcriptionLike+,
    att.common.attributes,
    att.edit.attributes,
    att.trans.attributes,
    empty
  }
supplied =
  
  ## Contains material supplied by the transcriber or editor in place of text which cannot be read, either because of physical damage or loss in the original or because it is illegible for any reason. 
  element supplied {
    (text
     | model.textphraseLike
     | model.eventLike
     | model.controleventLike
     | model.lyricsLike
     | model.editLike
     | model.transcriptionLike
     | model.eventLike.measureFilling
     | model.noteModifierLike
     | model.sectionLike
     | model.measureLike
     | model.staffLike
     | model.layerLike)*,
    att.agentident.attributes,
    att.common.attributes,
    att.edit.attributes,
    att.reasonident.attributes,
    empty
  }
att.wega.rend.attribute.rend =
  
  ## (graphische Darstellung) gibt an, wie das fragliche Element in der Vorlage graphisch dargestellt ist.
  attribute rend {
    
    ## Schriftart: latintype.
    "latintype"
    | 
      ## Schriftart: antiqua.
      "antiqua"
    | 
      ## hochgestelltes Zeichen.
      "superscript"
    | 
      ## tiefgestelltes Zeichen.
      "subscript"
    | 
      ## kursive Schriftlage.
      "italic"
    | 
      ## gesperrte Schriftbreite.
      "spaced_out"
    | 
      ## fette Schriftstärke.
      "bold"
    | 
      ## unterstrichener Text.
      "underline"
    | 
      ## Kapitälchen.
      "small-caps"
  }
att.wega.rend.attribute.n =
  
  ## (Zahl) gibt die Anzahl der Unterstreichungen an (d.h., @n kann nur in Kombination mit hi@rend='underline' auftreten).
  attribute n { text }?
sch:pattern [
  id = "wegaWorks-att.wega.rend-underline-n-constraint-37"
  "\x{a}" ~
  "    "
  sch:rule [
    context = "*:hi[@n] | *:rend[@n]"
    "\x{a}" ~
    "      "
    sch:report [
      test = "@rend ne 'underline'"
      "The @n-attribute is only supported in combination with @rend='underline'"
    ]
    "\x{a}" ~
    "    "
  ]
  "\x{a}" ~
  "  "
]
model.availabilityPart = price | useRestrict
start = mei | work | source
